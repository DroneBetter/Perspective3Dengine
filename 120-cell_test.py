dbg=(lambda x,*s: (x,print(*s,x))[0]) #debug
from functools import reduce #I will never import anything else from functools
construce=(lambda f,l,i=None: reduce(lambda a,b: f(*a,b),l,i))
from itertools import starmap,accumulate,groupby,product,combinations,permutations,chain,pairwise
redumulate=(lambda f,l,i=None: accumulate(l,f,initial=i))
tarmap=(lambda f,*l: tuple(starmap(f,*l)))
larmap=(lambda f,*l: list(starmap(f,*l)))
lap=(lambda func,*iterables: list(map(func,*iterables)))
tap=(lambda func,*iterables: tuple(map(func,*iterables)))
compose=(lambda *f: lambda *a: reduce(lambda a,f: (lambda a,i,f: (f(a) if i else f(*a)))(a,*f),enumerate(f),a))
transpose=(lambda l: zip(*l))
from operator import __add__,__neg__,__mul__,__eq__
from math import gcd,lcm,isqrt,sqrt,cos,tan,sin,acos,asin,atan2,e,tau,pi,hypot,dist
moddiv=(lambda a,b: divmod(a,b)[::-1])
sgn=(lambda n,zerositive=False: 1 if n>0 else -1 if n<0 else zerositive)
from numbers import Number

dot=(lambda a,b: sum(map(__mul__,a,b)))
from matrix_unraveller import unraveller,strucget,strucset,structrans,enmax
A002024=(lambda n: (isqrt(8*n)+1)//2)
A002260=(lambda n: n-(lambda s: s*(s-1)//2)(A002024(n))) #1-indexed antidiagonal coordinates

class matrix3: #flatly-encoded, implementing specific size for versor methods
    def __init__(m,t):
        m.internal=((1-2*(t[2]**2+t[3]**2  ),2*(t[1]*t[2]-t[0]*t[3]),2*(t[0]*t[2]+t[1]*t[3]),
                     2*(t[1]*t[2]+t[0]*t[3]),1-2*(t[1]**2+t[3]**2  ),2*(t[2]*t[3]-t[0]*t[1]),
                     2*(t[1]*t[3]-t[0]*t[2]),2*(t[0]*t[1]+t[2]*t[3]),1-2*(t[1]**2+t[2]**2  )) if type(t)==versor else tuple(t))
    __getitem__=(lambda m,i: m.internal[i])
    unravelling=unraveller(3)
    __matmul__=(lambda a,b: matrix3(matrix3.unravelling(a,b)))
    __mul__=(lambda a,b: a@b if type(b)==matrix3 else a@matrix3(b) if type(b)==versor else vector3(tap(lambda r: dot(a[3*r:3*(r+1)],b),range(3))) if type(b)==vector3 else matrix3(tap(lambda i: b*i,a)) if isinstance(b,Number) else ValueError('wibble'))
    det=(lambda m: m[0]*m[4]*m[8]-m[0]*m[5]*m[7]+m[1]*m[5]*m[6]-m[1]*m[3]*m[8]+m[2]*m[3]*m[7]-m[2]*m[4]*m[6])
    __rmul__=(lambda a,b: a*b)

class versor: #i through x (y to z), j through y (z to x), k through z (x to y) #no normalisation
    def __init__(q,t):
        q.internal=((lambda u,q: (lambda u: tap(lambda i: u*i,q))(u**-0.5/2))(*( ( (lambda u: (u,(t[3]-t[1],-t[2]-t[6],-t[5]-t[7], u        )))(1-t[0]-t[4]+t[8]) #my feeling when I cannot fast-inverse-square-root
                                                                 if t[0]<-t[4] else
                                                                  (lambda u: (u,(u        , t[7]-t[5], t[2]-t[6], t[3]-t[1])))(1+t[0]+t[4]+t[8]))
                                                               if t[8]>0 else
                                                                ( (lambda u: (u,(t[7]-t[5], u        ,-t[1]-t[3],-t[2]-t[6])))(1+t[0]-t[4]-t[8])
                                                                 if t[0]>t[4] else
                                                                  (lambda u: (u,(t[6]-t[2],-t[1]-t[3], u        ,-t[5]-t[7])))(1-t[0]+t[4]-t[8])))) #from https://d3cw3dd2w32x2b.cloudfront.net/wp-content/uploads/2015/01/matrix-to-quat.pdf
                    if type(t)==matrix3 else tuple(t))
    __getitem__=(lambda m,i: m.internal[i])
    __repr__=(lambda a: 'versor('+','.join(map(str,a.internal))+')')
    __mul__=(lambda a,b: versor((a[0]*b[0]-a[1]*b[1]-a[2]*b[2]-a[3]*b[3],
                      a[0]*b[1]+a[1]*b[0]+a[2]*b[3]-a[3]*b[2],
                      a[0]*b[2]-a[1]*b[3]+a[2]*b[0]+a[3]*b[1],
                      a[0]*b[3]+a[1]*b[2]-a[2]*b[1]+a[3]*b[0]))
             if type(b)==versor else
              matrix3(a)*b
             if type(b) in {matrix3,vector3} else
              versor(tap(lambda i: b*i,a))
             if isinstance(b,Number) else
              ValueError('wibble'))
    __eq__=(lambda a,b: a.internal==b.internal)#(lambda a,b: all(map(__eq__,a,b)))
    def log(q):
        try:
            immag=sqrt(1-q[0]**2) #=q[1]**2+q[2]**2+q[3]**2
            coeff=acos(q[0])/immag #the q[0] in the acos would be divided by magnitude if it weren't a unit vector
        except:
            immag=0
            coeff=1 #I don't like it but it wouldn't detect float equality correctly
        return(vector3((coeff*q[1],coeff*q[2],coeff*q[3]))) #0 would be log(magnitude)
    conjugate=(lambda q: versor((q[0],-q[1],-q[2],-q[3])))
    __pow__=(lambda a,b: a.conjugate() if b==-1 else exp(log(a)*b)) #special case can be removed if you would like more stability (living life on the edge)
    __truediv__=(lambda a,b: a*b**-1)

def slerp(a,b,t,x=None): #a*(b/a)**t=a*exp(log(b/a)*t), derived in https://github.com/DroneBetter/Perspective3Dengine/blob/main/perspective%203D%20engine.py
    dot=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3]
    ang=t*acos(abs(dot))
    bc=sin(ang)*sgn(dot,True)/sqrt(1-dot**2)
    ac=cos(ang)-bc*dot
    return((ac*a[0]+bc*b[0],
            ac*a[1]+bc*b[1],
            ac*a[2]+bc*b[2],
            ac*a[3]+bc*b[3]))
def rotationParameters(a,v,w,x=None): #'in general, to rotate by amount a from some versor v to a perpendicular versor w (while conserving the perpendicular components), you need the map (lambda x: (cos(a/2)+sin(a/2)*w*v**-1)*x*(cos(a/2)+sin(a/2)*v**-1*w))'
    c=cos(a/2);s=sin(a/2)
    if x==None:
        #w*v**-1
        left =versor((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]),
                        s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2]),
                        s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1]),
                        s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])))
        #v**-1*w
        right=versor((c+s*( v[0]*w[0]+v[1]*w[1]+v[2]*w[2]+v[3]*w[3]),
                        s*( v[0]*w[1]-v[1]*w[0]-v[2]*w[3]+v[3]*w[2]),
                        s*( v[0]*w[2]+v[1]*w[3]-v[2]*w[0]-v[3]*w[1]),
                        s*( v[0]*w[3]-v[1]*w[2]+v[2]*w[1]-v[3]*w[0])))
        return(left,right)
        #left*x*right (w*v**-1*x*v**-1*w)
        '''comp =versor((((c+s*(w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[0]-s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[1]-s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[2]-s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[3])*(c+s*( v[0]*w[0]+v[1]*w[1]+v[2]*w[2]+v[3]*w[3]))-((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[1]+s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[0]+s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[3]-s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[2])*(  s*( v[0]*w[1]-v[1]*w[0]-v[2]*w[3]+v[3]*w[2]))-((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[2]-s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[3]+s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[0]+s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[1])*(  s*( v[0]*w[2]+v[1]*w[3]-v[2]*w[0]-v[3]*w[1]))-((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[3]+s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[2]-s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[1]+s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[0])*(  s*( v[0]*w[3]-v[1]*w[2]+v[2]*w[1]-v[3]*w[0])),
                         ((c+s*(w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[0]-s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[1]-s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[2]-s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[3])*(  s*( v[0]*w[1]-v[1]*w[0]-v[2]*w[3]+v[3]*w[2]))+((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[1]+s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[0]+s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[3]-s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[2])*(c+s*( v[0]*w[0]+v[1]*w[1]+v[2]*w[2]+v[3]*w[3]))+((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[2]-s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[3]+s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[0]+s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[1])*(  s*( v[0]*w[3]-v[1]*w[2]+v[2]*w[1]-v[3]*w[0]))-((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[3]+s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[2]-s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[1]+s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[0])*(  s*( v[0]*w[2]+v[1]*w[3]-v[2]*w[0]-v[3]*w[1])),
                         ((c+s*(w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[0]-s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[1]-s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[2]-s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[3])*(  s*( v[0]*w[2]+v[1]*w[3]-v[2]*w[0]-v[3]*w[1]))-((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[1]+s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[0]+s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[3]-s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[2])*(  s*( v[0]*w[3]-v[1]*w[2]+v[2]*w[1]-v[3]*w[0]))+((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[2]-s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[3]+s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[0]+s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[1])*(c+s*( v[0]*w[0]+v[1]*w[1]+v[2]*w[2]+v[3]*w[3]))+((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[3]+s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[2]-s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[1]+s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[0])*(  s*( v[0]*w[1]-v[1]*w[0]-v[2]*w[3]+v[3]*w[2])),
                         ((c+s*(w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[0]-s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[1]-s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[2]-s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[3])*(  s*( v[0]*w[3]-v[1]*w[2]+v[2]*w[1]-v[3]*w[0]))+((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[1]+s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[0]+s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[3]-s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[2])*(  s*( v[0]*w[2]+v[1]*w[3]-v[2]*w[0]-v[3]*w[1]))-((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[2]-s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[3]+s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[0]+s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[1])*(  s*( v[0]*w[1]-v[1]*w[0]-v[2]*w[3]+v[3]*w[2]))+((c+s*( w[0]*v[0]+w[1]*v[1]+w[2]*v[2]+w[3]*v[3]))*x[3]+s*(-w[0]*v[1]+w[1]*v[0]-w[2]*v[3]+w[3]*v[2])*x[2]-s*(-w[0]*v[2]+w[1]*v[3]+w[2]*v[0]-w[3]*v[1])*x[1]+s*(-w[0]*v[3]-w[1]*v[2]+w[2]*v[1]+w[3]*v[0])*x[0])*(c+s*( v[0]*w[0]+v[1]*w[1]+v[2]*w[2]+v[3]*w[3]))))'''
    else:
        d=(v[0]*w[1]-v[1]*w[0]-v[2]*w[3]+v[3]*w[2],
           v[0]*w[2]+v[1]*w[3]-v[2]*w[0]-v[3]*w[1],
           v[0]*w[3]-v[1]*w[2]+v[2]*w[1]-v[3]*w[0])
        b=(v[0]*w[1]-v[1]*w[0]+v[2]*w[3]-v[3]*w[2],
           v[0]*w[2]-v[1]*w[3]-v[2]*w[0]+v[3]*w[1],
           v[0]*w[3]+v[1]*w[2]-v[2]*w[1]-v[3]*w[0])
        e=(c*x[0]+s*(-b[0]*x[1]-b[1]*x[2]-b[2]*x[3]),
           c*x[1]+s*( b[0]*x[0]+b[1]*x[3]-b[2]*x[2]),
           c*x[2]+s*(-b[0]*x[3]+b[1]*x[0]+b[2]*x[1]),
           c*x[3]+s*( b[0]*x[2]-b[1]*x[1]+b[2]*x[0]))
        return(versor((c*e[0]+s*(-d[0]*e[1]-d[1]*e[2]-d[2]*e[3]),
                       c*e[1]+s*( d[0]*e[0]-d[1]*e[3]+d[2]*e[2]),
                       c*e[2]+s*( d[0]*e[3]+d[1]*e[0]-d[2]*e[1]),
                       c*e[3]+s*(-d[0]*e[2]+d[1]*e[1]+d[2]*e[0])))) #fastest way I have found (for non-composable method)
class vector3:
    def __init__(v,t):
        v.internal=tuple(t)
    __getitem__=(lambda m,i: m.internal[i])
    __iter__=(lambda v: iter(v.internal))
    __repr__=(lambda a: 'vector3('+','.join(map(str,a.internal))+')')
    __mul__=(lambda a,b: vector3(dot(a,b)) if type(b)==vector3 else vector3(tap(lambda a: a*b,a)))
    __rmul__=(lambda a,b: a*b)
    __matmul__=(lambda a,b: vector3((a[1]*b[2]-a[2]*b[1],
                       a[2]*b[0]-a[0]*b[2],
                       a[0]*b[1]-a[1]*b[0]))) #cross
    __add__=(lambda a,b: vector3(map(__add__,a,b)))
    __neg__=(lambda v: vector3(map(__neg__,v)))
    __sub__=(lambda a,b: a+-b)
    dross=(lambda a,b: sum(a)*sum(b)-dot(a,b)) #useful in the perspective 3D engine's time mode
    normalise=(lambda v: (lambda m: vector3(tap(lambda v: v/m,v)) if 0!=m!=1 else v)(hypot(*v)))
    def exp(v): #meant to be specifically inverse of versor.log
        expreal=1#e**q[0]
        immag=hypot(*v) #cannot be sqrt(1-q[0]**2) due to logarithms not being unit vectors
        coeff=expreal*(immag and sin(immag)/immag)
        return(versor((expreal*cos(immag),coeff*v[0],coeff*v[1],coeff*v[2])))

def inthroot(b,n): #I hesitate to call it 'fast' integer nth root #sign-preserving (very suspicious)
    if b<0:
        return(-inthroot(-b,n))
    elif n==0:
        return(b)
    else:
        relation=tarmap(lambda i,n: n*(-1)**i,enumerate(reduce(lambda r,i: tarmap(int.__add__,pairwise((0,)+r+(0,))),range(n+1),(1,))[1:]))
        recurrence=(0,)*n
        for i in range(1,n+1):
            k=i**n
            recurrence=(k,)+recurrence
            if k>=b:
                break
        else:
            while k<b:
                i+=1
                k=dot(recurrence,relation) #pretty wacky stuff but outperforms **
                recurrence=(k,)+recurrence[:-1]
        return(i-(k>b))
mootroot=(lambda b,n: (lambda i: (b%i**n,i))(inthroot(b,n))) #like moddiv (I think it will catch on)

fratrix=(lambda m,dims=2,strict=True,hidezero=False: (lambda m: '\n'.join((lambda s: (lambda c: starmap(lambda i,r: (' ' if i else '(')+(','+'\n'*(dims==3)).join(starmap(lambda i,s: ' '*(c[i]-len(s))+s,enumerate(r)))+(',' if len(m)+~i else ')'),enumerate(s)))(tap(lambda c: max(map(len,c)),zip(*s))))(tap(lambda r: tap(lambda f: fratrix(f,2,strict) if dims==3 else str(f) if f else ' ',r),m))))(m if dims==2 else (m,)))

print(tap(lambda n: n%inthroot(n,2)**2,range(1,256)))
#print(tarmap(lambda x,y: x%inthroot(x,y)**y,map(lambda n: (A002024(n),A002260(n)),range(1,256))))
#print(fratrix(tap(lambda x: tap(lambda y: x%inthroot(x,y)**y,range(1,16)),range(1,64)))) #(new sequence :-)

def shortduce(f,l=None,i=None,o=None,b=None): #redwhile but with different function depending on shortcut (second element is used only as whether to proceed)
    if i==None: i=next(l)
    i=(i,True)
    if l==None:
        while True:
            if i[1]: i=f(i[0])
            else: return(i[0] if b==None else b(i[0]))
    else:
        for j in l:
            if i[1]: i=f(i[0],j)
            else: return(i[0] if b==None else b(i[0]))
    return((lambda f,i: i if f==None else f(i))(o if i[1] else b,i[0]))
factorise=(lambda n: (lambda f: f+tap(lambda f: n//f,reversed(f[:-1] if isqrt(n)**2==n else f)))(tuple(filter(lambda a: n%a==0,range(1,isqrt(n)+1)))))
def stractorise(struc,inds): #structure factorise
    global diff
    if (lambda g: type(g)==int and g!=1)(strucget(struc,inds)) and (lambda g: len(g)==inds[-2]+1 or type(g[inds[-2]+1])==int)(strucget(struc,inds[:-1])):
        diff=True
        struc=strucset(struc,inds,(lambda g: [g,list(factorise(g))[1:-1]])(strucget(struc,inds)))
    return(struc,inds)
primate=(lambda n: () if n==1 else (lambda p: p if p else ((n,1),))(tuple(filter(lambda p: p[1],map(lambda p: (p,shortduce(lambda i: (i[0],False) if i[1]%p else ((i[0]+1,i[1]//p),True),i=(0,n))),reduce(lambda t,i: t+(i,)*all(map(lambda p: i%p,t)),range(2,n),()))))))
class surd:
    __repr__=(lambda a: 'surd('+''.join(starmap(lambda i,a: ('-' if sgn(a[0][0])==-1 else '+' if i else ' ')+(lambda f: f if a[1]==1 else 'sqrt('+f+')' if a[1]==2 and False else '('+f+')**(1/'+str(a[1])+')')(str(abs(a[0][0]))+('/'+str(a[0][1]))*(a[0][1]!=1)),enumerate(a.internal)))+')')
    __iter__=(lambda a: iter(a.internal))
    def simplify(a):
        while True:
            ones=[]
            cont=False
            for i,(b,e) in enumerate(a.internal):
                for j,(c,f) in enumerate(a.internal[i+1:],start=i+1):
                    if e==f and b[1]==c[1]:
                        if b[0]==-c[0]:
                            del(a.internal[j]);del(a.internal[i]);cont=True;break
                        elif b[0]==c[0]:
                            a.internal[i]=[[b[0]*2**e,b[1]],e];del(a.internal[j]);cont=True;break
                if cont:
                    break
                elif b[0]:
                    g=gcd(*b)
                    if g!=1:
                        a.internal[i][0]=[b[0]//g,b[1]//g]
                        cont=True
                        break
                    n=[b,e]
                    for f,x in primate(e):
                        for p in range(x+1):
                            if any(map(lambda b: b!=sgn(b)*abs(inthroot(b,f**p)**f**p),b)):
                                p-=1
                                break
                        if p:
                            n=[lap(lambda b: inthroot(b,f**p),n[0]),n[1]//f**p]
                            cont=True
                    a.internal[i]=n
                    if cont:
                        break
                    if e==1:
                        ones.append(i)
                else:
                    del(a.internal[i])
            if len(ones)>1:
                frac=[0,1]
                for i in ones[::-1]:
                    frac=(lambda n,d: (lambda l: [frac[0]*l//frac[1]+n*l//d,l])(lcm(frac[1],d)))(*a.internal[i][0])
                    del(a.internal[i])
                a.internal.append([frac,1])
            elif not cont:
                break
        a.internal.sort()
        if not a.internal:
            a.internal=[[[0,1],1]]
        return(a.internal)
    __eq__=(lambda a,b: a.internal==b.internal)
    __add__=(lambda a,b: surd(a.internal+b.internal))
    __neg__=(lambda a: surd(lap(lambda a: [[-a[0][0],a[0][1]],a[1]],a.internal)))
    __sub__=(lambda a,b: a+-b)
    __mul__=(lambda a,b: surd(map(lambda a: [[a[0][0]*b,a[0][1]],a[1]],a)) if type(b)==int else surd([(lambda l: [[sgn(n)*sgn(m)*abs(n**(l//e)*m**(l//f)),d**(l//e)*c**(l//f)],l])(lcm(e,f)) for ((n,d),e),((m,c),f) in product(a,b) if n and m]))
    __float__=(lambda a: float(sum(map(lambda b: sgn(b[0][0])*(abs(b[0][0])/b[0][1])**(1/b[1]),a))))
    __bool__=(lambda a: any(map(lambda a: a[0][0],a)))
    __gt__=(lambda a,b: float(a)>float(b))
    def __init__(a,t):
        if type(t)==int:
            a.internal=[[[t,1],1]]
        else:
            a.internal=list(t)
            a.simplify()
surd([[[10,2],2],[[1,1],1]])
surd([[[1,1],1],[[36,1],6]])
print(surd([[[1,1],1],[[5,1],2]])*surd([[[1,1],1],[[5,1],2]]))

parity=(lambda a,b: reduce(int.__xor__,((a<b)&(B<A) for (a,A),(b,B) in product(zip(a,b),repeat=2)))) #very suspicious (from https://codegolf.stackexchange.com/questions/75841/75856)
eventations=(lambda v: filter(lambda n: not parity(v,n),permutations(v)))

signs=(lambda q,alge=True: (lambda e: tap(lambda n: reduce(lambda c,q: (c[0]+(q*(-1)**(n>>c[1]&1),),c[1]+1) if q else (c[0]+(surd(0) if alge else 0,),c[1]),q,((),0))[0],range(1<<len(e))))(tuple(filter(lambda x: x[1],enumerate(q)))))
cell600=tap(lambda n: versor((n>>1)*(surd(0),)+(surd((-1)**n),)+(4+~(n>>1))*(surd(0),)),range(8))+tap(versor,signs((surd([[[1,2],1]]),)*4))+tap(versor,chain.from_iterable(map(signs,eventations((surd([[[1,4],1],[[5,16],2]]),surd([[[-1,4],1],[[5,16],2]]),surd([[[1,2],1]]),surd([[[0,1],1]]))))))
nodes=tap(lambda q: versor(map(float,q)),cell600)
__import__('pprint').pprint(cell600)
#print(len(cell600))
#transitions=tap(lambda c: tap(lambda d: cell600.index(c*d),cell600),cell600)
#print(fratrix(transitions,hidezero=False))
#print('\\\n'.join(map(lambda t: ''.join(map(lambda t: (lambda x: '0'*(2-len(x))+x)(hex(t)[2:]),t)),transitions))) #very suspicious
transitions=\
((  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119),
 (  1,  0,  3,  2,  5,  4,  7,  6, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8, 31, 30, 29, 28, 27, 26, 25, 24, 39, 38, 37, 36, 35, 34, 33, 32, 47, 46, 45, 44, 43, 42, 41, 40, 55, 54, 53, 52, 51, 50, 49, 48, 63, 62, 61, 60, 59, 58, 57, 56, 71, 70, 69, 68, 67, 66, 65, 64, 79, 78, 77, 76, 75, 74, 73, 72, 87, 86, 85, 84, 83, 82, 81, 80, 95, 94, 93, 92, 91, 90, 89, 88,103,102,101,100, 99, 98, 97, 96,111,110,109,108,107,106,105,104,119,118,117,116,115,114,113,112),
 (  2,  3,  1,  0,  6,  7,  5,  4, 13, 15, 12, 14, 21, 23, 20, 22,  9, 11,  8, 10, 17, 19, 16, 18, 49, 51, 48, 50, 53, 55, 52, 54, 77, 79, 76, 78, 73, 75, 72, 74, 98, 99,102,103, 96, 97,100,101, 29, 31, 28, 30, 25, 27, 24, 26, 81, 83, 80, 82, 85, 87, 84, 86,106,107,110,111,104,105,108,109, 33, 35, 32, 34, 37, 39, 36, 38, 61, 63, 60, 62, 57, 59, 56, 58,114,115,118,119,112,113,116,117, 43, 42, 47, 46, 41, 40, 45, 44, 67, 66, 71, 70, 65, 64, 69, 68, 91, 90, 95, 94, 89, 88, 93, 92),
 (  3,  2,  0,  1,  7,  6,  4,  5, 18, 16, 19, 17, 10,  8, 11,  9, 22, 20, 23, 21, 14, 12, 15, 13, 54, 52, 55, 53, 50, 48, 51, 49, 74, 72, 75, 73, 78, 76, 79, 77,101,100, 97, 96,103,102, 99, 98, 26, 24, 27, 25, 30, 28, 31, 29, 86, 84, 87, 85, 82, 80, 83, 81,109,108,105,104,111,110,107,106, 38, 36, 39, 37, 34, 32, 35, 33, 58, 56, 59, 57, 62, 60, 63, 61,117,116,113,112,119,118,115,114, 44, 45, 40, 41, 46, 47, 42, 43, 68, 69, 64, 65, 70, 71, 66, 67, 92, 93, 88, 89, 94, 95, 90, 91),
 (  4,  5,  7,  6,  1,  0,  2,  3, 17, 21,  9, 13, 16, 20,  8, 12, 19, 23, 11, 15, 18, 22, 10, 14, 93, 95, 89, 91, 92, 94, 88, 90,108,110,104,106,109,111,105,107, 57, 61, 56, 60, 59, 63, 58, 62,116,118,112,114,117,119,113,115, 45, 47, 41, 43, 44, 46, 40, 42, 73, 77, 72, 76, 75, 79, 74, 78, 69, 71, 65, 67, 68, 70, 64, 66,100,102, 96, 98,101,103, 97, 99, 25, 29, 24, 28, 27, 31, 26, 30, 85, 81, 84, 80, 87, 83, 86, 82, 37, 33, 36, 32, 39, 35, 38, 34, 53, 49, 52, 48, 55, 51, 54, 50),
 (  5,  4,  6,  7,  0,  1,  3,  2, 14, 10, 22, 18, 15, 11, 23, 19, 12,  8, 20, 16, 13,  9, 21, 17, 90, 88, 94, 92, 91, 89, 95, 93,107,105,111,109,106,104,110,108, 62, 58, 63, 59, 60, 56, 61, 57,115,113,119,117,114,112,118,116, 42, 40, 46, 44, 43, 41, 47, 45, 78, 74, 79, 75, 76, 72, 77, 73, 66, 64, 70, 68, 67, 65, 71, 69, 99, 97,103,101, 98, 96,102,100, 30, 26, 31, 27, 28, 24, 29, 25, 82, 86, 83, 87, 80, 84, 81, 85, 34, 38, 35, 39, 32, 36, 33, 37, 50, 54, 51, 55, 48, 52, 49, 53),
 (  6,  7,  4,  5,  3,  2,  1,  0, 11, 19, 15, 23,  9, 17, 13, 21, 10, 18, 14, 22,  8, 16, 12, 20,113,117,115,119,112,116,114,118, 65, 69, 67, 71, 64, 68, 66, 70, 83, 87, 81, 85, 82, 86, 80, 84, 89, 93, 91, 95, 88, 92, 90, 94, 97,101, 99,103, 96,100, 98,102, 35, 39, 33, 37, 34, 38, 32, 36,105,109,107,111,104,108,106,110, 41, 45, 43, 47, 40, 44, 42, 46, 51, 55, 49, 53, 50, 54, 48, 52, 59, 63, 57, 61, 58, 62, 56, 60, 75, 79, 73, 77, 74, 78, 72, 76, 27, 31, 25, 29, 26, 30, 24, 28),
 (  7,  6,  5,  4,  2,  3,  0,  1, 20, 12, 16,  8, 22, 14, 18, 10, 21, 13, 17,  9, 23, 15, 19, 11,118,114,116,112,119,115,117,113, 70, 66, 68, 64, 71, 67, 69, 65, 84, 80, 86, 82, 85, 81, 87, 83, 94, 90, 92, 88, 95, 91, 93, 89,102, 98,100, 96,103, 99,101, 97, 36, 32, 38, 34, 37, 33, 39, 35,110,106,108,104,111,107,109,105, 46, 42, 44, 40, 47, 43, 45, 41, 52, 48, 54, 50, 53, 49, 55, 51, 60, 56, 62, 58, 61, 57, 63, 59, 76, 72, 78, 74, 77, 73, 79, 75, 28, 24, 30, 26, 29, 25, 31, 27),
 (  8, 23, 17, 14, 11, 20, 13, 18,  9,  1,  6, 15,  2, 21, 12,  5,  4, 19, 10,  3, 16,  7,  0, 22,104, 39, 64, 79, 72, 71, 32,111, 96, 47, 80, 63, 56, 87, 40,103,112, 31, 48, 95, 88, 55, 24,119, 73, 37, 66,107,108, 69, 34, 78, 89, 27,113, 51, 52,118, 28, 94, 81, 43, 98, 61, 58,101, 44, 86, 57, 45, 82, 99,100, 85, 42, 62, 49, 29,114, 91, 92,117, 26, 54, 65, 35, 76,110,105, 75, 36, 70, 25,115, 53, 90, 93, 50,116, 30, 41, 83,102, 60, 59, 97, 84, 46, 33, 67, 77,106,109, 74, 68, 38),
 (  9, 22, 19, 12, 15, 16, 21, 10,  1, 23, 13,  5, 17,  7,  2, 20, 11,  3,  6, 14,  4, 18,  8,  0, 41,103, 81, 62, 57, 86, 96, 46, 25,119, 49, 94, 89, 54,112, 30, 33,111, 73, 70, 65, 78,104, 38, 45, 87, 98, 60, 59,101, 80, 42, 35, 79, 67,107,108, 68, 72, 36, 29, 95, 53,118,113, 50, 88, 26, 27, 55,114, 90, 93,117, 48, 28, 37, 71, 77,110,105, 74, 64, 34, 43, 63,100, 84, 83, 99, 56, 44, 39,106, 69, 76, 75, 66,109, 32, 31, 91,116, 52, 51,115, 92, 24, 47, 61, 85,102, 97, 82, 58, 40),
 ( 10, 21, 16, 15, 19, 12,  9, 22,  4, 17, 11,  1,  8,  2,  6, 13, 18,  7,  3, 23,  0, 20, 14,  5, 58, 85, 97, 47, 40,102, 82, 61, 88, 53,113, 29, 26,118, 50, 95,105, 37, 64, 77, 74, 71, 34,110, 56,100, 83, 43, 44, 84, 99, 63,109, 69, 75, 39, 32, 76, 66,106, 89, 25,112, 49, 54,119, 30, 94, 92,116, 51, 31, 24, 52,115, 91,104, 73, 65, 33, 38, 70, 78,111, 59, 45, 80, 98,101, 87, 42, 60,108, 35, 72, 67, 68, 79, 36,107, 93, 27, 48,114,117, 55, 28, 90, 57, 41, 96, 81, 86,103, 46, 62),
 ( 11, 20, 18, 13, 23,  8, 17, 14, 19,  7,  1, 21,  4, 16,  9,  2,  3, 22, 15,  5, 10,  0,  6, 12, 75, 70, 35,110,105, 36, 65, 76, 59, 84, 41,102, 97, 46, 83, 60, 27,118, 89, 52, 51, 94,113, 28,109, 68, 33, 77, 74, 38, 67,106, 55,119, 31, 95, 88, 24,112, 48, 45, 85, 57,100, 99, 62, 82, 42,101, 86, 43, 61, 58, 44, 81, 98, 93,116, 25, 53, 50, 30,115, 90, 39, 71,104, 72, 79,111, 64, 32,117, 29, 92, 49, 54, 91, 26,114, 87, 47, 56, 96,103, 63, 40, 80, 69, 37,108, 73, 78,107, 34, 66),
 ( 12, 19,  9, 22, 10, 21, 15, 16,  6, 11, 14,  3, 13,  1,  5, 23,  8,  4,  0, 18,  2, 17, 20,  7, 80, 59, 42,101, 98, 45, 60, 87,114, 27, 90, 55, 48, 93, 28,117, 66, 75,106, 39, 32,109, 76, 69, 81, 41, 62,103, 96, 57, 46, 86, 64,105, 34, 74, 77, 37,110, 71,115, 51, 91, 31, 24, 92, 52,116,112, 89, 30, 54, 49, 25, 94,119, 67, 35,107, 79, 72,108, 36, 68, 82, 97, 61, 47, 40, 58,102, 85, 65, 78, 33,111,104, 38, 73, 70,113, 50, 29, 95, 88, 26, 53,118, 83, 99, 43, 63, 56, 44,100, 84),
 ( 13, 18, 11, 20, 14, 17, 23,  8, 15,  3,  5, 22,  1, 19, 21,  7,  6, 10, 12,  0,  9,  4,  2, 16, 67, 74,106, 38, 33,109, 77, 68, 43,101, 61, 86, 81, 58, 98, 44, 91, 54, 29,117,114, 26, 49, 92, 35, 75,110, 70, 65,105, 76, 36,115, 50, 90, 30, 25, 93, 53,116, 63,103, 47, 87, 80, 40, 96, 56, 83, 97, 60, 46, 41, 59,102, 84, 31, 55, 95,119,112, 88, 48, 24,107, 78, 37, 69, 66, 34, 73,108, 51, 94, 27,118,113, 28, 89, 52, 99, 62, 45, 85, 82, 42, 57,100, 79,111, 39, 71, 64, 32,104, 72),
 ( 14, 17,  8, 23, 18, 13, 11, 20, 10,  4,  3, 19,  6,  9, 15,  1,  0, 16, 22,  7, 12,  2,  5, 21, 34,108, 78, 69, 66, 73,107, 37, 82, 57, 99, 45, 42,100, 62, 85, 50, 93,115, 25, 30,116, 90, 53, 64,104, 79, 39, 32, 72,111, 71, 26, 92, 54,117,114, 49, 91, 29, 97, 59, 83, 41, 46, 84, 60,102, 40, 56,103, 87, 80, 96, 63, 47,113, 89, 51, 27, 28, 52, 94,118, 74,109, 67, 33, 38, 68,106, 77, 88, 55,112, 31, 24,119, 48, 95, 58,101, 81, 43, 44, 86, 98, 61,105, 75, 65, 35, 36, 70, 76,110),
 ( 15, 16, 10, 21, 22,  9, 19, 12,  3, 18, 23,  7, 11,  4,  1, 17, 14,  0,  5, 20,  6,  8, 13,  2, 99, 44, 63, 84, 83, 56, 43,100, 51, 92, 31,116,115, 24, 91, 52, 79, 68, 35,108,107, 36, 67, 72, 97, 58, 47, 85, 82, 40, 61,102, 78, 38,111, 70, 65,104, 33, 73, 55,117, 27, 93, 90, 28,114, 48, 50, 26, 95,118,113, 88, 29, 53, 75,109, 39, 69, 66, 32,106, 76,103, 86, 41, 57, 62, 46, 81, 96, 74, 71,105, 37, 34,110, 64, 77, 54,119, 89, 25, 30, 94,112, 49,101, 87, 59, 45, 42, 60, 80, 98),
 ( 16, 15, 21, 10,  9, 22, 12, 19,  2, 13,  8,  6, 20,  5,  0, 14, 17,  1,  4, 11,  7, 23, 18,  3,100, 43, 56, 83, 84, 63, 44, 99, 52, 91, 24,115,116, 31, 92, 51, 72, 67, 36,107,108, 35, 68, 79,102, 61, 40, 82, 85, 47, 58, 97, 73, 33,104, 65, 70,111, 38, 78, 48,114, 28, 90, 93, 27,117, 55, 53, 29, 88,113,118, 95, 26, 50, 76,106, 32, 66, 69, 39,109, 75, 96, 81, 46, 62, 57, 41, 86,103, 77, 64,110, 34, 37,105, 71, 74, 49,112, 94, 30, 25, 89,119, 54, 98, 80, 60, 42, 45, 59, 87,101),
 ( 17, 14, 23,  8, 13, 18, 20, 11, 21,  5,  2, 12,  7, 22, 16,  0,  1, 15,  9,  6, 19,  3,  4, 10, 37,107, 73, 66, 69, 78,108, 34, 85, 62,100, 42, 45, 99, 57, 82, 53, 90,116, 30, 25,115, 93, 50, 71,111, 72, 32, 39, 79,104, 64, 29, 91, 49,114,117, 54, 92, 26,102, 60, 84, 46, 41, 83, 59, 97, 47, 63, 96, 80, 87,103, 56, 40,118, 94, 52, 28, 27, 51, 89,113, 77,106, 68, 38, 33, 67,109, 74, 95, 48,119, 24, 31,112, 55, 88, 61, 98, 86, 44, 43, 81,101, 58,110, 76, 70, 36, 35, 65, 75,105),
 ( 18, 13, 20, 11, 17, 14,  8, 23, 16,  2,  4,  9,  0, 12, 10,  6,  7, 21, 19,  1, 22,  5,  3, 15, 68, 77,109, 33, 38,106, 74, 67, 44, 98, 58, 81, 86, 61,101, 43, 92, 49, 26,114,117, 29, 54, 91, 36, 76,105, 65, 70,110, 75, 35,116, 53, 93, 25, 30, 90, 50,115, 56, 96, 40, 80, 87, 47,103, 63, 84,102, 59, 41, 46, 60, 97, 83, 24, 48, 88,112,119, 95, 55, 31,108, 73, 34, 66, 69, 37, 78,107, 52, 89, 28,113,118, 27, 94, 51,100, 57, 42, 82, 85, 45, 62, 99, 72,104, 32, 64, 71, 39,111, 79),
 ( 19, 12, 22,  9, 21, 10, 16, 15,  7, 20, 17,  2, 18,  0,  4,  8, 23,  5,  1, 13,  3, 14, 11,  6, 87, 60, 45, 98,101, 42, 59, 80,117, 28, 93, 48, 55, 90, 27,114, 69, 76,109, 32, 39,106, 75, 66, 86, 46, 57, 96,103, 62, 41, 81, 71,110, 37, 77, 74, 34,105, 64,116, 52, 92, 24, 31, 91, 51,115,119, 94, 25, 49, 54, 30, 89,112, 68, 36,108, 72, 79,107, 35, 67, 85,102, 58, 40, 47, 61, 97, 82, 70, 73, 38,104,111, 33, 78, 65,118, 53, 26, 88, 95, 29, 50,113, 84,100, 44, 56, 63, 43, 99, 83),
 ( 20, 11, 13, 18,  8, 23, 14, 17, 12,  6,  0, 10,  5, 15, 22,  3,  2,  9, 16,  4, 21,  1,  7, 19, 76, 65, 36,105,110, 35, 70, 75, 60, 83, 46, 97,102, 41, 84, 59, 28,113, 94, 51, 52, 89,118, 27,106, 67, 38, 74, 77, 33, 68,109, 48,112, 24, 88, 95, 31,119, 55, 42, 82, 62, 99,100, 57, 85, 45, 98, 81, 44, 58, 61, 43, 86,101, 90,115, 30, 50, 53, 25,116, 93, 32, 64,111, 79, 72,104, 71, 39,114, 26, 91, 54, 49, 92, 29,117, 80, 40, 63,103, 96, 56, 47, 87, 66, 34,107, 78, 73,108, 37, 69),
 ( 21, 10, 15, 16, 12, 19, 22,  9,  5, 14, 20,  0, 23,  3,  7, 18, 13,  6,  2,  8,  1, 11, 17,  4, 61, 82,102, 40, 47, 97, 85, 58, 95, 50,118, 26, 29,113, 53, 88,110, 34, 71, 74, 77, 64, 37,105, 63, 99, 84, 44, 43, 83,100, 56,106, 66, 76, 32, 39, 75, 69,109, 94, 30,119, 54, 49,112, 25, 89, 91,115, 52, 24, 31, 51,116, 92,111, 78, 70, 38, 33, 65, 73,104, 60, 42, 87,101, 98, 80, 45, 59,107, 36, 79, 68, 67, 72, 35,108, 90, 28, 55,117,114, 48, 27, 93, 62, 46,103, 86, 81, 96, 41, 57),
 ( 22,  9, 12, 19, 16, 15, 10, 21,  0,  8, 18,  4, 14,  6,  3, 11, 20,  2,  7, 17,  5, 13, 23,  1, 46, 96, 86, 57, 62, 81,103, 41, 30,112, 54, 89, 94, 49,119, 25, 38,104, 78, 65, 70, 73,111, 33, 42, 80,101, 59, 60, 98, 87, 45, 36, 72, 68,108,107, 67, 79, 35, 26, 88, 50,113,118, 53, 95, 29, 28, 48,117, 93, 90,114, 55, 27, 34, 64, 74,105,110, 77, 71, 37, 44, 56, 99, 83, 84,100, 63, 43, 32,109, 66, 75, 76, 69,106, 39, 24, 92,115, 51, 52,116, 91, 31, 40, 58, 82, 97,102, 85, 61, 47),
 ( 23,  8, 14, 17, 20, 11, 18, 13, 22,  0,  7, 16,  3, 10, 19,  4,  5, 12, 21,  2, 15,  6,  1,  9,111, 32, 71, 72, 79, 64, 39,104,103, 40, 87, 56, 63, 80, 47, 96,119, 24, 55, 88, 95, 48, 31,112, 78, 34, 69,108,107, 66, 37, 73, 94, 28,118, 52, 51,113, 27, 89, 86, 44,101, 58, 61, 98, 43, 81, 62, 42, 85,100, 99, 82, 45, 57, 54, 26,117, 92, 91,114, 29, 49, 70, 36, 75,105,110, 76, 35, 65, 30,116, 50, 93, 90, 53,115, 25, 46, 84, 97, 59, 60,102, 83, 41, 38, 68, 74,109,106, 77, 67, 33),
 ( 24, 31, 53, 50, 89, 94,114,117, 96, 33, 64, 83, 76, 61, 42,107,108, 45, 58, 75, 84, 71, 38,103, 56,  1, 88, 35, 36, 95,  0, 63, 72, 29, 40, 15, 16, 47, 26, 79,  8, 43, 32, 91, 92, 39, 44, 23,  2, 77, 82,115,116, 85, 74,  3, 57, 25,105, 11, 20,110, 30, 62,112, 81, 12,106,109, 19, 86,119,100, 37, 10, 51, 52, 21, 34, 99, 48, 13, 80, 67, 68, 87, 18, 55,104, 41, 28,  5,  4, 27, 46,111, 73,113,102, 14, 17, 97,118, 78,  9, 65, 60, 90, 93, 59, 70, 22, 49,  6, 98, 66, 69,101,  7, 54),
 ( 25, 30, 55, 48, 91, 92,118,113, 47,111, 77, 60, 69, 86,100, 36, 35, 99, 81, 66, 59, 74,104, 40,  1, 62, 33, 90, 93, 38, 57,  0, 45, 22, 73, 28, 27, 78,  9, 42, 37, 94, 17, 46, 41, 14, 89, 34, 87,119,  2, 76, 75,  3,112, 80, 31, 63, 13,106,109, 18, 56, 24, 21,110,116, 84, 83,115,105, 10, 39,103, 49, 12, 19, 54, 96, 32, 85, 70, 53, 20, 11, 50, 65, 82, 29,  5,108, 44, 43,107,  4, 26, 23, 98,117, 72, 79,114,101,  8, 95, 61, 68, 16, 15, 67, 58, 88, 71,102,  7, 52, 51,  6, 97, 64),
 ( 26, 29, 52, 51, 93, 90,112,119, 56, 73,105, 41, 32, 98, 82, 67, 68, 85,101, 39, 46,110, 78, 63, 92, 37, 58,  1,  0, 61, 34, 91, 24, 77, 10, 43, 44, 21, 74, 31, 88, 33, 40, 13, 18, 47, 38, 95, 72,  2,113, 83, 84,118,  3, 79,108, 17, 59, 27, 28, 60, 14,107,104,  9, 80,114,117, 87, 22,111, 16, 53, 97, 35, 36,102, 50, 15,  8, 49, 64, 81, 86, 71, 54, 23,  4, 25, 42,106,109, 45, 30,  5,100, 11, 76,115,116, 75, 20, 99, 57, 89, 12, 66, 69, 19, 94, 62, 96, 65, 48,  6,  7, 55, 70,103),
 ( 27, 28, 54, 49, 95, 88,116,115, 87, 70, 37,102,109, 44, 57, 72, 79, 62, 43,106, 97, 34, 65, 80, 39, 94,  1, 60, 59,  0, 89, 32, 19, 46, 25, 76, 75, 30, 41, 12, 45, 20, 93, 36, 35, 90, 11, 42,117, 86, 73,  2,  3, 78, 81,114, 23,111, 29, 61, 58, 26,104,  8, 85,118,108, 16, 15,107,113, 82, 55, 22, 33, 98,101, 38,  9, 48, 69, 84, 17, 52, 51, 14, 83, 66, 47,110,  4, 24, 31,  5,105, 40,119, 77, 18, 96,103, 13, 74,112, 71, 21, 92, 56, 63, 91, 10, 64,  7, 53, 68,100, 99, 67, 50,  6),
 ( 28, 27, 49, 54, 88, 95,115,116, 80, 65, 34, 97,106, 43, 62, 79, 72, 57, 44,109,102, 37, 70, 87, 32, 89,  0, 59, 60,  1, 94, 39, 12, 41, 30, 75, 76, 25, 46, 19, 42, 11, 90, 35, 36, 93, 20, 45,114, 81, 78,  3,  2, 73, 86,117,  8,104, 26, 58, 61, 29,111, 23, 82,113,107, 15, 16,108,118, 85, 48,  9, 38,101, 98, 33, 22, 55, 66, 83, 14, 51, 52, 17, 84, 69, 40,105,  5, 31, 24,  4,110, 47,112, 74, 13,103, 96, 18, 77,119, 64, 10, 91, 63, 56, 92, 21, 71,  6, 50, 67, 99,100, 68, 53,  7),
 ( 29, 26, 51, 52, 90, 93,119,112, 63, 78,110, 46, 39,101, 85, 68, 67, 82, 98, 32, 41,105, 73, 56, 91, 34, 61,  0,  1, 58, 37, 92, 31, 74, 21, 44, 43, 10, 77, 24, 95, 38, 47, 18, 13, 40, 33, 88, 79,  3,118, 84, 83,113,  2, 72,107, 14, 60, 28, 27, 59, 17,108,111, 22, 87,117,114, 80,  9,104, 15, 50,102, 36, 35, 97, 53, 16, 23, 54, 71, 86, 81, 64, 49,  8,  5, 30, 45,109,106, 42, 25,  4, 99, 20, 75,116,115, 76, 11,100, 62, 94, 19, 69, 66, 12, 89, 57,103, 70, 55,  7,  6, 48, 65, 96),
 ( 30, 25, 48, 55, 92, 91,113,118, 40,104, 74, 59, 66, 81, 99, 35, 36,100, 86, 69, 60, 77,111, 47,  0, 57, 38, 93, 90, 33, 62,  1, 42,  9, 78, 27, 28, 73, 22, 45, 34, 89, 14, 41, 46, 17, 94, 37, 80,112,  3, 75, 76,  2,119, 87, 24, 56, 18,109,106, 13, 63, 31, 10,105,115, 83, 84,116,110, 21, 32, 96, 54, 19, 12, 49,103, 39, 82, 65, 50, 11, 20, 53, 70, 85, 26,  4,107, 43, 44,108,  5, 29,  8,101,114, 79, 72,117, 98, 23, 88, 58, 67, 15, 16, 68, 61, 95, 64, 97,  6, 51, 52,  7,102, 71),
 ( 31, 24, 50, 53, 94, 89,117,114,103, 38, 71, 84, 75, 58, 45,108,107, 42, 61, 76, 83, 64, 33, 96, 63,  0, 95, 36, 35, 88,  1, 56, 79, 26, 47, 16, 15, 40, 29, 72, 23, 44, 39, 92, 91, 32, 43,  8,  3, 74, 85,116,115, 82, 77,  2, 62, 30,110, 20, 11,105, 25, 57,119, 86, 19,109,106, 12, 81,112, 99, 34, 21, 52, 51, 10, 37,100, 55, 18, 87, 68, 67, 80, 13, 48,111, 46, 27,  4,  5, 28, 41,104, 78,118, 97, 17, 14,102,113, 73, 22, 70, 59, 93, 90, 60, 65,  9, 54,  7,101, 69, 66, 98,  6, 49),
 ( 32, 39, 73, 78,105,110, 67, 68,112, 41, 82, 51, 98, 29, 90, 63, 56, 93, 26,101, 52, 85, 46,119,  8, 27, 40, 75, 76, 47, 28, 23, 48,  1, 42, 79, 72, 45,  0, 55, 80, 35, 12, 31, 24, 19, 36, 87, 49, 33, 14, 99,100, 17, 38, 54,104, 89, 10, 97,102, 21, 94,111,  6, 83,106, 91, 92,109, 84,  7, 96, 25, 34,  3,  2, 37, 30,103,114, 43, 66, 15, 16, 69, 44,117, 64, 11, 60, 95, 88, 59, 20, 71,  9, 50, 77, 62, 57, 74, 53, 22, 65,113, 61,  5,  4, 58,118, 70, 81,115, 13,107,108, 18,116, 86),
 ( 33, 38, 75, 76,107,108, 71, 64, 31,103, 61, 94, 45,117, 53, 84, 83, 50,114, 42, 89, 58, 96, 24, 43, 78, 13, 30, 25, 18, 73, 44,  1, 54, 77, 46, 41, 74, 49,  0, 29, 22, 37, 86, 81, 34,  9, 26, 39, 55,102, 20, 11, 97, 48, 32, 15, 99,106, 90, 93,109,100, 16, 95,111, 85,  7,  6, 82,104, 88, 35,  3, 98, 28, 27,101,  2, 36, 47,119, 21, 70, 65, 10,112, 40, 91, 62, 17, 68, 67, 14, 57, 92, 79, 60, 19, 52, 51, 12, 59, 72, 63,  5, 69,116,115, 66,  4, 56, 23,110, 87,118,113, 80,105,  8),
 ( 34, 37, 72, 79,109,106, 65, 70, 88, 57, 97, 27, 80, 49,115, 43, 44,116, 54, 87, 28,102, 62, 95, 26, 17, 74, 45, 42, 77, 14, 29, 40, 73, 50,  1,  0, 53, 78, 47, 10, 25, 82, 33, 38, 85, 30, 21,  8, 96, 51, 35, 36, 52,103, 23, 92,108,101, 19, 12, 98,107, 91,105, 89,  6, 81, 86,  7, 94,110, 24,100,  3, 39, 32,  2, 99, 31, 64,  9,113, 41, 46,118, 22, 71, 58, 93, 66, 13, 18, 69, 90, 61, 56, 75, 48, 15, 16, 55, 76, 63,  4, 59,114, 67, 68,117, 60,  5,104, 11,112, 83, 84,119, 20,111),
 ( 35, 36, 74, 77,111,104, 69, 66, 55, 86, 47,118, 59, 92, 25,100, 99, 30, 91, 60,113, 40, 81, 48, 79, 46, 31, 20, 11, 24, 41, 72, 75, 44,  1, 52, 51,  0, 43, 76, 39, 84, 27, 16, 15, 28, 83, 32,101, 18, 37, 53, 50, 34, 13, 98,103, 22, 95,110,105, 88,  9, 96, 87,  7, 93,108,107, 90,  6, 80,  3, 38, 29,102, 97, 26, 33,  2, 19, 68, 45,116,115, 42, 67, 12, 23, 70, 89, 56, 63, 94, 65,  8, 54, 21, 58, 73, 78, 61, 10, 49,119, 71,  4, 57, 62,  5, 64,112,117, 85,109, 17, 14,106, 82,114),
 ( 36, 35, 77, 74,104,111, 66, 69, 48, 81, 40,113, 60, 91, 30, 99,100, 25, 92, 59,118, 47, 86, 55, 72, 41, 24, 11, 20, 31, 46, 79, 76, 43,  0, 51, 52,  1, 44, 75, 32, 83, 28, 15, 16, 27, 84, 39, 98, 13, 34, 50, 53, 37, 18,101, 96,  9, 88,105,110, 95, 22,103, 80,  6, 90,107,108, 93,  7, 87,  2, 33, 26, 97,102, 29, 38,  3, 12, 67, 42,115,116, 45, 68, 19,  8, 65, 94, 63, 56, 89, 70, 23, 49, 10, 61, 78, 73, 58, 21, 54,112, 64,  5, 62, 57,  4, 71,119,114, 82,106, 14, 17,109, 85,117),
 ( 37, 34, 79, 72,106,109, 70, 65, 95, 62,102, 28, 87, 54,116, 44, 43,115, 49, 80, 27, 97, 57, 88, 29, 14, 77, 42, 45, 74, 17, 26, 47, 78, 53,  0,  1, 50, 73, 40, 21, 30, 85, 38, 33, 82, 25, 10, 23,103, 52, 36, 35, 51, 96,  8, 91,107, 98, 12, 19,101,108, 92,110, 94,  7, 86, 81,  6, 89,105, 31, 99,  2, 32, 39,  3,100, 24, 71, 22,118, 46, 41,113,  9, 64, 61, 90, 69, 18, 13, 66, 93, 58, 63, 76, 55, 16, 15, 48, 75, 56,  5, 60,117, 68, 67,114, 59,  4,111, 20,119, 84, 83,112, 11,104),
 ( 38, 33, 76, 75,108,107, 64, 71, 24, 96, 58, 89, 42,114, 50, 83, 84, 53,117, 45, 94, 61,103, 31, 44, 73, 18, 25, 30, 13, 78, 43,  0, 49, 74, 41, 46, 77, 54,  1, 26,  9, 34, 81, 86, 37, 22, 29, 32, 48, 97, 11, 20,102, 55, 39, 16,100,109, 93, 90,106, 99, 15, 88,104, 82,  6,  7, 85,111, 95, 36,  2,101, 27, 28, 98,  3, 35, 40,112, 10, 65, 70, 21,119, 47, 92, 57, 14, 67, 68, 17, 62, 91, 72, 59, 12, 51, 52, 19, 60, 79, 56,  4, 66,115,116, 69,  5, 63,  8,105, 80,113,118, 87,110, 23),
 ( 39, 32, 78, 73,110,105, 68, 67,119, 46, 85, 52,101, 26, 93, 56, 63, 90, 29, 98, 51, 82, 41,112, 23, 28, 47, 76, 75, 40, 27,  8, 55,  0, 45, 72, 79, 42,  1, 48, 87, 36, 19, 24, 31, 12, 35, 80, 54, 38, 17,100, 99, 14, 33, 49,111, 94, 21,102, 97, 10, 89,104,  7, 84,109, 92, 91,106, 83,  6,103, 30, 37,  2,  3, 34, 25, 96,117, 44, 69, 16, 15, 66, 43,114, 71, 20, 59, 88, 95, 60, 11, 64, 22, 53, 74, 57, 62, 77, 50,  9, 70,118, 58,  4,  5, 61,113, 65, 86,116, 18,108,107, 13,115, 81),
 ( 40, 47,100, 99, 59, 60, 81, 86,104, 25,113, 35, 48, 77, 66, 91, 92, 69, 74, 55, 36,118, 30,111, 88, 45, 10, 39, 32, 21, 42, 95,  8, 37, 82, 31, 24, 85, 34, 23, 64,  1, 80, 29, 26, 87,  0, 71, 96, 73,115, 15, 16,116, 78,103,  4, 93, 97, 75, 76,102, 90,  5, 65, 41,114, 13, 18,117, 46, 70, 56, 17, 50, 79, 72, 53, 14, 63,112, 33,  6, 43, 44,  7, 38,119,105, 27, 12, 61, 58, 19, 28,110, 57, 51,  2,107,108,  3, 52, 62, 89, 11, 98,106,109,101, 20, 94,  9, 83, 49, 67, 68, 54, 84, 22),
 ( 41, 46,101, 98, 63, 56, 85, 82, 39,119, 29,110, 93, 68, 73, 52, 51, 78, 67, 90,105, 26,112, 32, 35, 22, 43, 94, 89, 44,  9, 36, 27, 86, 33, 20, 11, 38, 81, 28,  1, 70, 25, 84, 83, 30, 65,  0, 19,117, 77,102, 97, 74,114, 12, 79,103, 91,  5,  4, 92, 96, 72, 47, 71, 17,116,115, 14, 64, 40, 75, 54, 13, 60, 59, 18, 49, 76, 45,  7, 37,118,113, 34,  6, 42, 31,111, 57, 16, 15, 62,104, 24, 55, 61,109,  2,  3,106, 58, 48, 23, 95,108,100, 99,107, 88,  8, 87, 21, 69, 53, 50, 66, 10, 80),
 ( 42, 45, 96,103, 58, 61, 83, 84, 64, 89, 50, 75,114, 33,107, 31, 24,108, 38,117, 76, 53, 94, 71, 40, 93, 34, 19, 12, 37, 90, 47, 80, 25, 14, 39, 32, 17, 30, 87, 82, 27, 66,  1,  0, 69, 28, 85,112,  9, 99, 79, 72,100, 22,119, 88,  4, 74,101, 98, 77,  5, 95,113, 11, 67, 43, 44, 68, 20,118,  8, 57, 78, 55, 48, 73, 62, 23,  6, 41,115, 35, 36,116, 46,  7, 10, 59,106, 29, 26,109, 60, 21,104,  3, 49, 63, 56, 54,  2,111,105, 97, 13, 91, 92, 18,102,110, 65, 51, 81, 15, 16, 86, 52, 70),
 ( 43, 44, 97,102, 62, 57, 87, 80, 79, 54, 95, 70, 27,109, 37,116,115, 34,106, 28, 65, 88, 49, 72, 15, 38, 91, 46, 41, 92, 33, 16, 35, 18, 29, 84, 83, 26, 13, 36, 31, 86,  1, 68, 67,  0, 81, 24, 75,101, 21,118,113, 10, 98, 76, 99, 78,  5, 94, 89,  4, 73,100, 23,119, 45, 69, 66, 42,112,  8, 51, 74, 61, 20, 11, 58, 77, 52, 39,117, 47,  7,  6, 40,114, 32, 63, 22, 25,108,107, 30,  9, 56,  3,110, 59, 53, 50, 60,105,  2,103,111, 93, 17, 14, 90,104, 96, 55, 71, 19, 85, 82, 12, 64, 48),
 ( 44, 43,102, 97, 57, 62, 80, 87, 72, 49, 88, 65, 28,106, 34,115,116, 37,109, 27, 70, 95, 54, 79, 16, 33, 92, 41, 46, 91, 38, 15, 36, 13, 26, 83, 84, 29, 18, 35, 24, 81,  0, 67, 68,  1, 86, 31, 76, 98, 10,113,118, 21,101, 75,100, 73,  4, 89, 94,  5, 78, 99,  8,112, 42, 66, 69, 45,119, 23, 52, 77, 58, 11, 20, 61, 74, 51, 32,114, 40,  6,  7, 47,117, 39, 56,  9, 30,107,108, 25, 22, 63,  2,105, 60, 50, 53, 59,110,  3, 96,104, 90, 14, 17, 93,111,103, 48, 64, 12, 82, 85, 19, 71, 55),
 ( 45, 42,103, 96, 61, 58, 84, 83, 71, 94, 53, 76,117, 38,108, 24, 31,107, 33,114, 75, 50, 89, 64, 47, 90, 37, 12, 19, 34, 93, 40, 87, 30, 17, 32, 39, 14, 25, 80, 85, 28, 69,  0,  1, 66, 27, 82,119, 22,100, 72, 79, 99,  9,112, 95,  5, 77, 98,101, 74,  4, 88,118, 20, 68, 44, 43, 67, 11,113, 23, 62, 73, 48, 55, 78, 57,  8,  7, 46,116, 36, 35,115, 41,  6, 21, 60,109, 26, 29,106, 59, 10,111,  2, 54, 56, 63, 49,  3,104,110,102, 18, 92, 91, 13, 97,105, 70, 52, 86, 16, 15, 81, 51, 65),
 ( 46, 41, 98,101, 56, 63, 82, 85, 32,112, 26,105, 90, 67, 78, 51, 52, 73, 68, 93,110, 29,119, 39, 36,  9, 44, 89, 94, 43, 22, 35, 28, 81, 38, 11, 20, 33, 86, 27,  0, 65, 30, 83, 84, 25, 70,  1, 12,114, 74, 97,102, 77,117, 19, 72, 96, 92,  4,  5, 91,103, 79, 40, 64, 14,115,116, 17, 71, 47, 76, 49, 18, 59, 60, 13, 54, 75, 42,  6, 34,113,118, 37,  7, 45, 24,104, 62, 15, 16, 57,111, 31, 48, 58,106,  3,  2,109, 61, 55,  8, 88,107, 99,100,108, 95, 23, 80, 10, 66, 50, 53, 69, 21, 87),
 ( 47, 40, 99,100, 60, 59, 86, 81,111, 30,118, 36, 55, 74, 69, 92, 91, 66, 77, 48, 35,113, 25,104, 95, 42, 21, 32, 39, 10, 45, 88, 23, 34, 85, 24, 31, 82, 37,  8, 71,  0, 87, 26, 29, 80,  1, 64,103, 78,116, 16, 15,115, 73, 96,  5, 90,102, 76, 75, 97, 93,  4, 70, 46,117, 18, 13,114, 41, 65, 63, 14, 53, 72, 79, 50, 17, 56,119, 38,  7, 44, 43,  6, 33,112,110, 28, 19, 58, 61, 12, 27,105, 62, 52,  3,108,107,  2, 51, 57, 94, 20,101,109,106, 98, 11, 89, 22, 84, 54, 68, 67, 49, 83,  9),
 ( 48, 55, 25, 30,113,118, 91, 92, 81, 35, 66, 99, 77, 47, 60,111,104, 59, 40, 74,100, 69, 36, 86,112, 75, 80,  3,  2, 87, 76,119, 49, 39, 12,103, 96, 19, 32, 54,114, 79, 98, 23,  8,101, 72,117, 33,  1, 90, 62, 57, 93,  0, 38, 65, 11, 82, 50, 53, 85, 20, 70, 67, 15, 61, 95, 88, 58, 16, 68,  9, 27, 42, 78, 73, 45, 28, 22, 13, 31,106, 63, 56,109, 24, 18,  6, 51,102, 71, 64, 97, 52,  7, 41, 14, 37, 94, 89, 34, 17, 46, 83,115, 21,110,105, 10,116, 84, 43,107, 29,  5,  4, 26,108, 44),
 ( 49, 54, 27, 28,115,116, 95, 88, 43, 79,106, 62, 37, 87,102, 70, 65, 97, 80, 34, 57,109, 72, 44, 81,  3,114, 78, 73,117,  2, 86, 33, 55, 98, 22,  9,101, 48, 38, 13,103, 77,119,112, 74, 96, 18,  1, 39, 60, 94, 89, 59, 32,  0, 83, 51, 66, 14, 17, 69, 52, 84, 91, 63, 21, 71, 64, 10, 56, 92, 41, 75, 12, 30, 25, 19, 76, 46, 29, 23, 61,111,104, 58,  8, 26, 67, 99, 53,  7,  6, 50,100, 68, 35, 90, 45, 20, 11, 42, 93, 36, 15,107, 85,118,113, 82,108, 16, 31,  5, 47,110,105, 40,  4, 24),
 ( 50, 53, 24, 31,117,114, 89, 94, 58,108, 75, 45, 64, 96, 83, 33, 38, 84,103, 71, 42, 76,107, 61, 74,116,  3, 85, 82,  2,115, 77, 10,100, 51, 37, 34, 52, 99, 21, 97, 17,113, 73, 78,118, 14,102, 88, 56, 35,  1,  0, 36, 63, 95, 18, 68, 55, 87, 80, 48, 67, 13, 59, 93, 65,  9, 22, 70, 90, 60, 26, 16, 79, 47, 40, 72, 15, 29,105, 57, 11, 25, 30, 20, 62,110,101, 69,  6, 49, 54,  7, 66, 98, 92, 39,  8, 43, 44, 23, 32, 91,109, 19,112, 81, 86,119, 12,106,  4, 27,104, 41, 46,111, 28,  5),
 ( 51, 52, 26, 29,119,112, 93, 90,101, 68, 39, 85,105, 56, 41, 73, 78, 46, 63,110, 82, 32, 67, 98,  3, 84, 79,118,113, 72, 83,  2, 97, 16, 35, 53, 50, 36, 15,102, 75,116, 11,100, 99, 20,115, 76, 58, 92,  1, 37, 34,  0, 91, 61, 54, 86, 23, 71, 64,  8, 81, 49, 19, 69, 89, 57, 62, 94, 66, 12, 74, 44, 31, 21, 10, 24, 43, 77, 59,108, 27, 17, 14, 28,107, 60, 55,  7, 65, 96,103, 70,  6, 48, 18, 47, 88, 33, 38, 95, 40, 13,117, 87,104,  9, 22,111, 80,114,109, 45,  4, 25, 30,  5, 42,106),
 ( 52, 51, 29, 26,112,119, 90, 93, 98, 67, 32, 82,110, 63, 46, 78, 73, 41, 56,105, 85, 39, 68,101,  2, 83, 72,113,118, 79, 84,  3,102, 15, 36, 50, 53, 35, 16, 97, 76,115, 20, 99,100, 11,116, 75, 61, 91,  0, 34, 37,  1, 92, 58, 49, 81,  8, 64, 71, 23, 86, 54, 12, 66, 94, 62, 57, 89, 69, 19, 77, 43, 24, 10, 21, 31, 44, 74, 60,107, 28, 14, 17, 27,108, 59, 48,  6, 70,103, 96, 65,  7, 55, 13, 40, 95, 38, 33, 88, 47, 18,114, 80,111, 22,  9,104, 87,117,106, 42,  5, 30, 25,  4, 45,109),
 ( 53, 50, 31, 24,114,117, 94, 89, 61,107, 76, 42, 71,103, 84, 38, 33, 83, 96, 64, 45, 75,108, 58, 77,115,  2, 82, 85,  3,116, 74, 21, 99, 52, 34, 37, 51,100, 10,102, 14,118, 78, 73,113, 17, 97, 95, 63, 36,  0,  1, 35, 56, 88, 13, 67, 48, 80, 87, 55, 68, 18, 60, 90, 70, 22,  9, 65, 93, 59, 29, 15, 72, 40, 47, 79, 16, 26,110, 62, 20, 30, 25, 11, 57,105, 98, 66,  7, 54, 49,  6, 69,101, 91, 32, 23, 44, 43,  8, 39, 92,106, 12,119, 86, 81,112, 19,109,  5, 28,111, 46, 41,104, 27,  4),
 ( 54, 49, 28, 27,116,115, 88, 95, 44, 72,109, 57, 34, 80, 97, 65, 70,102, 87, 37, 62,106, 79, 43, 86,  2,117, 73, 78,114,  3, 81, 38, 48,101,  9, 22, 98, 55, 33, 18, 96, 74,112,119, 77,103, 13,  0, 32, 59, 89, 94, 60, 39,  1, 84, 52, 69, 17, 14, 66, 51, 83, 92, 56, 10, 64, 71, 21, 63, 91, 46, 76, 19, 25, 30, 12, 75, 41, 26,  8, 58,104,111, 61, 23, 29, 68,100, 50,  6,  7, 53, 99, 67, 36, 93, 42, 11, 20, 45, 90, 35, 16,108, 82,113,118, 85,107, 15, 24,  4, 40,105,110, 47,  5, 31),
 ( 55, 48, 30, 25,118,113, 92, 91, 86, 36, 69,100, 74, 40, 59,104,111, 60, 47, 77, 99, 66, 35, 81,119, 76, 87,  2,  3, 80, 75,112, 54, 32, 19, 96,103, 12, 39, 49,117, 72,101,  8, 23, 98, 79,114, 38,  0, 93, 57, 62, 90,  1, 33, 70, 20, 85, 53, 50, 82, 11, 65, 68, 16, 58, 88, 95, 61, 15, 67, 22, 28, 45, 73, 78, 42, 27,  9, 18, 24,109, 56, 63,106, 31, 13,  7, 52, 97, 64, 71,102, 51,  6, 46, 17, 34, 89, 94, 37, 14, 41, 84,116, 10,105,110, 21,115, 83, 44,108, 26,  4,  5, 29,107, 43),
 ( 56, 63, 85, 82, 41, 46, 98,101, 73, 29,112, 67, 52,110, 32, 90, 93, 39,105, 51, 68,119, 26, 78, 57, 31,104, 15, 16,111, 24, 62,100, 95,  8,107,108, 23, 88, 99, 96, 91, 72,  5,  4, 79, 92,103, 53, 21, 80, 66, 69, 87, 10, 50, 25,  1, 65, 83, 84, 70,  0, 30, 49, 13, 76, 60, 59, 75, 18, 54, 17, 47, 64,115,116, 71, 40, 14,  2, 61, 48,106,109, 55, 58,  3,  9, 43, 36, 94, 89, 35, 44, 22, 37,  6,118, 42, 45,113,  7, 34, 33, 81, 20, 28, 27, 11, 86, 38, 77,114,102, 12, 19, 97,117, 74),
 ( 57, 62, 87, 80, 43, 44,102, 97, 37, 95, 49,106,116, 70, 72, 28, 27, 79, 65,115,109, 54, 88, 34, 25, 63,  9,107,108, 22, 56, 30, 17,111, 96, 90, 93,103,104, 14, 73,  5,100, 94, 89, 99,  4, 78, 85, 71, 48, 12, 19, 55, 64, 82,  1, 31, 81, 67, 68, 86, 24,  0, 77, 61, 52, 20, 11, 51, 58, 74, 45, 23,112, 66, 69,119,  8, 42, 53,110,  2, 60, 59,  3,105, 50, 33, 91, 16, 46, 41, 15, 92, 38, 47,114,  7, 32, 39,  6,117, 40, 29, 13, 84, 36, 35, 83, 18, 26, 21, 98,118, 76, 75,113,101, 10),
 ( 58, 61, 84, 83, 45, 42, 96,103,108, 53, 89, 33, 24, 76, 64,114,117, 71, 75, 31, 38, 94, 50,107,109, 21, 59, 29, 26, 60, 10,106, 92,102,105, 13, 18,110, 97, 91,  4, 77, 88, 98,101, 95, 74,  5, 16, 52, 65, 81, 86, 70, 51, 15, 69, 85, 27,  1,  0, 28, 82, 66, 57, 73,  8, 48, 55, 23, 78, 62, 68,118, 11, 43, 44, 20,113, 67, 56,  2,104, 49, 54,111,  3, 63, 93, 37, 40, 12, 19, 47, 34, 90,116, 41, 36,  6,  7, 35, 46,115, 17, 25, 32, 80, 87, 39, 30, 14,100,  9, 72,112,119, 79, 22, 99),
 ( 59, 60, 86, 81, 47, 40,100, 99, 69,118, 25, 77, 92, 36,104, 48, 55,111, 35, 91, 74, 30,113, 66, 19,110, 27, 61, 58, 28,105, 12,109, 20, 89, 98,101, 94, 11,106, 93,102,  4, 76, 75,  5, 97, 90, 68, 84,  9, 49, 54, 22, 83, 67, 87, 71,  1, 29, 26,  0, 64, 80, 17, 53, 56, 72, 79, 63, 50, 14,117, 70, 41, 13, 18, 46, 65,114,108, 52, 57,  2,  3, 62, 51,107, 45, 21, 88, 32, 39, 95, 10, 42,  7, 33, 44,112,119, 43, 38,  6, 85, 37, 24,  8, 23, 31, 34, 82,116, 73, 16, 96,103, 15, 78,115),
 ( 60, 59, 81, 86, 40, 47, 99,100, 66,113, 30, 74, 91, 35,111, 55, 48,104, 36, 92, 77, 25,118, 69, 12,105, 28, 58, 61, 27,110, 19,106, 11, 94,101, 98, 89, 20,109, 90, 97,  5, 75, 76,  4,102, 93, 67, 83, 22, 54, 49,  9, 84, 68, 80, 64,  0, 26, 29,  1, 71, 87, 14, 50, 63, 79, 72, 56, 53, 17,114, 65, 46, 18, 13, 41, 70,117,107, 51, 62,  3,  2, 57, 52,108, 42, 10, 95, 39, 32, 88, 21, 45,  6, 38, 43,119,112, 44, 33,  7, 82, 34, 31, 23,  8, 24, 37, 85,115, 78, 15,103, 96, 16, 73,116),
 ( 61, 58, 83, 84, 42, 45,103, 96,107, 50, 94, 38, 31, 75, 71,117,114, 64, 76, 24, 33, 89, 53,108,106, 10, 60, 26, 29, 59, 21,109, 91, 97,110, 18, 13,105,102, 92,  5, 74, 95,101, 98, 88, 77,  4, 15, 51, 70, 86, 81, 65, 52, 16, 66, 82, 28,  0,  1, 27, 85, 69, 62, 78, 23, 55, 48,  8, 73, 57, 67,113, 20, 44, 43, 11,118, 68, 63,  3,111, 54, 49,104,  2, 56, 90, 34, 47, 19, 12, 40, 37, 93,115, 46, 35,  7,  6, 36, 41,116, 14, 30, 39, 87, 80, 32, 25, 17, 99, 22, 79,119,112, 72,  9,100),
 ( 62, 57, 80, 87, 44, 43, 97,102, 34, 88, 54,109,115, 65, 79, 27, 28, 72, 70,116,106, 49, 95, 37, 30, 56, 22,108,107,  9, 63, 25, 14,104,103, 93, 90, 96,111, 17, 78,  4, 99, 89, 94,100,  5, 73, 82, 64, 55, 19, 12, 48, 71, 85,  0, 24, 86, 68, 67, 81, 31,  1, 74, 58, 51, 11, 20, 52, 61, 77, 42,  8,119, 69, 66,112, 23, 45, 50,105,  3, 59, 60,  2,110, 53, 38, 92, 15, 41, 46, 16, 91, 33, 40,117,  6, 39, 32,  7,114, 47, 26, 18, 83, 35, 36, 84, 13, 29, 10,101,113, 75, 76,118, 98, 21),
 ( 63, 56, 82, 85, 46, 41,101, 98, 78, 26,119, 68, 51,105, 39, 93, 90, 32,110, 52, 67,112, 29, 73, 62, 24,111, 16, 15,104, 31, 57, 99, 88, 23,108,107,  8, 95,100,103, 92, 79,  4,  5, 72, 91, 96, 50, 10, 87, 69, 66, 80, 21, 53, 30,  0, 70, 84, 83, 65,  1, 25, 54, 18, 75, 59, 60, 76, 13, 49, 14, 40, 71,116,115, 64, 47, 17,  3, 58, 55,109,106, 48, 61,  2, 22, 44, 35, 89, 94, 36, 43,  9, 34,  7,113, 45, 42,118,  6, 37, 38, 86, 11, 27, 28, 20, 81, 33, 74,117, 97, 19, 12,102,114, 77),
 ( 64, 71,108,107, 75, 76, 33, 38, 89, 45, 83, 31, 96, 53,114, 61, 58,117, 50,103, 24, 84, 42, 94,105, 87,113, 23,  8,118, 80,110,104, 85,  6, 95, 88,  7, 82,111, 65, 47,112, 21, 10,119, 40, 70, 57, 17, 67, 91, 92, 68, 14, 62, 59, 19, 51, 79, 72, 52, 12, 60, 41,  1, 49, 77, 74, 54,  0, 46,  4, 69,115, 63, 56,116, 66,  5,  9, 37, 81, 29, 26, 86, 34, 22, 11, 39, 48,102, 97, 55, 32, 20, 93, 15,100,106,109, 99, 16, 90, 27, 35,  2, 98,101,  3, 36, 28, 25, 43, 73, 13, 18, 78, 44, 30),
 ( 65, 70,109,106, 79, 72, 37, 34, 27, 87, 43, 95, 57,116, 49,102, 97, 54,115, 62, 88, 44, 80, 28, 11,119, 83,111,104, 84,112, 20, 89,  7, 81,110,105, 86,  6, 94, 41, 71,  9,118,113, 22, 64, 46, 93, 69, 13, 61, 58, 18, 66, 90, 75, 55, 15, 63, 56, 16, 48, 76,  1, 47, 73, 53, 50, 78, 40,  0, 59,117, 67,  5,  4, 68,114, 60, 25, 85, 33, 21, 10, 38, 82, 30, 35, 23, 96, 52, 51,103,  8, 36, 19, 91,108, 98,101,107, 92, 12, 39, 31,100,  2,  3, 99, 24, 32, 45, 29, 17, 77, 74, 14, 26, 42),
 ( 66, 69,104,111, 74, 77, 35, 36,113, 59, 99, 55, 81, 25, 91, 47, 40, 92, 30, 86, 48,100, 60,118, 82,109, 14,117,114, 17,106, 85,  6, 93,107, 87, 80,108, 90,  7,115, 19, 67, 45, 42, 68, 12,116, 65, 89, 63, 23,  8, 56, 94, 70, 10, 58, 78, 54, 49, 73, 61, 21, 51, 75, 43,  1,  0, 44, 76, 52, 64,  4, 62,119,112, 57,  5, 71, 83, 27, 15, 39, 32, 16, 28, 84, 50,101, 13, 37, 34, 18, 98, 53,105,103,  9, 95, 88, 22, 96,110, 97,  3, 33, 29, 26, 38,  2,102, 11, 79, 41, 31, 24, 46, 72, 20),
 ( 67, 68,105,110, 78, 73, 39, 32, 51,101, 63,119, 41, 93, 29, 85, 82, 26, 90, 46,112, 56, 98, 52,115, 18,107, 86, 81,108, 13,116, 83,109, 91,  7,  6, 92,106, 84, 15,117, 43, 69, 66, 44,114, 16, 11, 59, 95, 71, 64, 88, 60, 20, 50, 74, 62, 22,  9, 57, 77, 53, 79, 55,  1, 45, 42,  0, 48, 72,113, 58,  5, 70, 65,  4, 61,118, 35, 19, 31, 87, 80, 24, 12, 36, 99, 54, 33, 17, 14, 38, 49,100, 97,111, 89, 21, 10, 94,104,102,  3,103, 25, 37, 34, 30, 96,  2, 75, 23, 27, 47, 40, 28,  8, 76),
 ( 68, 67,110,105, 73, 78, 32, 39, 52, 98, 56,112, 46, 90, 26, 82, 85, 29, 93, 41,119, 63,101, 51,116, 13,108, 81, 86,107, 18,115, 84,106, 92,  6,  7, 91,109, 83, 16,114, 44, 66, 69, 43,117, 15, 20, 60, 88, 64, 71, 95, 59, 11, 53, 77, 57,  9, 22, 62, 74, 50, 72, 48,  0, 42, 45,  1, 55, 79,118, 61,  4, 65, 70,  5, 58,113, 36, 12, 24, 80, 87, 31, 19, 35,100, 49, 38, 14, 17, 33, 54, 99,102,104, 94, 10, 21, 89,111, 97,  2, 96, 30, 34, 37, 25,103,  3, 76,  8, 28, 40, 47, 27, 23, 75),
 ( 69, 66,111,104, 77, 74, 36, 35,118, 60,100, 48, 86, 30, 92, 40, 47, 91, 25, 81, 55, 99, 59,113, 85,106, 17,114,117, 14,109, 82,  7, 90,108, 80, 87,107, 93,  6,116, 12, 68, 42, 45, 67, 19,115, 70, 94, 56,  8, 23, 63, 89, 65, 21, 61, 73, 49, 54, 78, 58, 10, 52, 76, 44,  0,  1, 43, 75, 51, 71,  5, 57,112,119, 62,  4, 64, 84, 28, 16, 32, 39, 15, 27, 83, 53, 98, 18, 34, 37, 13,101, 50,110, 96, 22, 88, 95,  9,103,105,102,  2, 38, 26, 29, 33,  3, 97, 20, 72, 46, 24, 31, 41, 79, 11),
 ( 70, 65,106,109, 72, 79, 34, 37, 28, 80, 44, 88, 62,115, 54, 97,102, 49,116, 57, 95, 43, 87, 27, 20,112, 84,104,111, 83,119, 11, 94,  6, 86,105,110, 81,  7, 89, 46, 64, 22,113,118,  9, 71, 41, 90, 66, 18, 58, 61, 13, 69, 93, 76, 48, 16, 56, 63, 15, 55, 75,  0, 40, 78, 50, 53, 73, 47,  1, 60,114, 68,  4,  5, 67,117, 59, 30, 82, 38, 10, 21, 33, 85, 25, 36,  8,103, 51, 52, 96, 23, 35, 12, 92,107,101, 98,108, 91, 19, 32, 24, 99,  3,  2,100, 31, 39, 42, 26, 14, 74, 77, 17, 29, 45),
 ( 71, 64,107,108, 76, 75, 38, 33, 94, 42, 84, 24,103, 50,117, 58, 61,114, 53, 96, 31, 83, 45, 89,110, 80,118,  8, 23,113, 87,105,111, 82,  7, 88, 95,  6, 85,104, 70, 40,119, 10, 21,112, 47, 65, 62, 14, 68, 92, 91, 67, 17, 57, 60, 12, 52, 72, 79, 51, 19, 59, 46,  0, 54, 74, 77, 49,  1, 41,  5, 66,116, 56, 63,115, 69,  4, 22, 34, 86, 26, 29, 81, 37,  9, 20, 32, 55, 97,102, 48, 39, 11, 90, 16, 99,109,106,100, 15, 93, 28, 36,  3,101, 98,  2, 35, 27, 30, 44, 78, 18, 13, 73, 43, 25),
 ( 72, 79, 37, 34, 65, 70,106,109, 49, 43, 80,115,102, 95, 28, 62, 57, 27, 88, 97,116, 87, 44, 54, 96, 35,  8, 51, 52, 23, 36,103,  2, 31, 32, 99,100, 39, 24,  3, 48, 15, 76, 63, 56, 75, 16, 55, 77, 29, 42, 14, 17, 45, 26, 74,  9, 41, 64,113,118, 71, 46, 22,114, 67, 60,  5,  4, 59, 68,117, 73,  1, 40, 50, 53, 47,  0, 78, 98, 91, 12,107,108, 19, 92,101,112, 83, 20,111,104, 11, 84,119, 33, 82, 21, 30, 25, 10, 85, 38, 81,  6,110, 94, 89,105,  7, 86, 13, 66, 61, 90, 93, 58, 69, 18),
 ( 73, 78, 39, 32, 67, 68,110,105, 29, 63, 98, 90, 85,119, 52, 46, 41, 51,112, 82, 93,101, 56, 26, 33, 99, 49, 14, 17, 54,100, 38, 37,103,  2, 30, 25,  3, 96, 34, 77, 62, 53, 22,  9, 50, 57, 74, 47, 23, 76, 28, 27, 75,  8, 40, 43, 15,114, 66, 69,117, 16, 44, 61,  5,118, 70, 65,113,  4, 58,  1, 79, 48, 42, 45, 55, 72,  0, 21,111,102, 94, 89, 97,104, 10, 13,107,116, 86, 81,115,108, 18, 31, 12, 87, 36, 35, 80, 19, 24, 91,106,  7, 84, 83,  6,109, 92, 95, 60, 71, 20, 11, 64, 59, 88),
 ( 74, 77, 36, 35, 69, 66,104,111, 92,100, 59, 25, 40, 48,113, 81, 86,118, 55, 47, 30, 60, 99, 91, 18, 53,101, 37, 34, 98, 50, 13, 26,  2, 97, 33, 38,102,  3, 29, 58, 73, 10, 49, 54, 21, 78, 61, 24, 72, 11, 41, 46, 20, 79, 31, 68,116, 19, 45, 42, 12,115, 67,  4, 57, 64,112,119, 71, 62,  5, 44, 52, 75,  1,  0, 76, 51, 43, 88, 96,105,  9, 22,110,103, 95,109, 17, 82,114,117, 85, 14,106, 16, 27, 32, 83, 84, 39, 28, 15,108, 93, 80,  6,  7, 87, 90,107, 56, 89,  8, 65, 70, 23, 94, 63),
 ( 75, 76, 38, 33, 71, 64,108,107,117, 84, 45, 53, 58, 24, 89, 96,103, 94, 31, 61, 50, 42, 83,114, 55, 20, 39,102, 97, 32, 11, 48,101, 36, 27,  2,  3, 28, 35, 98, 19, 52, 59, 72, 79, 60, 51, 12, 18, 44, 25, 73, 78, 30, 43, 13,119, 70, 47, 21, 10, 40, 65,112, 69,116,  4, 56, 63,  5,115, 66, 54, 46,  1, 77, 74,  0, 41, 49,109, 16, 93,100, 99, 90, 15,106, 87,118,105,  8, 23,110,113, 80, 86, 37, 26,  9, 22, 29, 34, 81,  7, 85, 88,104,111, 95, 82,  6, 68, 17, 92, 57, 62, 91, 14, 67),
 ( 76, 75, 33, 38, 64, 71,107,108,114, 83, 42, 50, 61, 31, 94,103, 96, 89, 24, 58, 53, 45, 84,117, 48, 11, 32, 97,102, 39, 20, 55, 98, 35, 28,  3,  2, 27, 36,101, 12, 51, 60, 79, 72, 59, 52, 19, 13, 43, 30, 78, 73, 25, 44, 18,112, 65, 40, 10, 21, 47, 70,119, 66,115,  5, 63, 56,  4,116, 69, 49, 41,  0, 74, 77,  1, 46, 54,106, 15, 90, 99,100, 93, 16,109, 80,113,110, 23,  8,105,118, 87, 81, 34, 29, 22,  9, 26, 37, 86,  6, 82, 95,111,104, 88, 85,  7, 67, 14, 91, 62, 57, 92, 17, 68),
 ( 77, 74, 35, 36, 66, 69,111,104, 91, 99, 60, 30, 47, 55,118, 86, 81,113, 48, 40, 25, 59,100, 92, 13, 50, 98, 34, 37,101, 53, 18, 29,  3,102, 38, 33, 97,  2, 26, 61, 78, 21, 54, 49, 10, 73, 58, 31, 79, 20, 46, 41, 11, 72, 24, 67,115, 12, 42, 45, 19,116, 68,  5, 62, 71,119,112, 64, 57,  4, 43, 51, 76,  0,  1, 75, 52, 44, 95,103,110, 22,  9,105, 96, 88,106, 14, 85,117,114, 82, 17,109, 15, 28, 39, 84, 83, 32, 27, 16,107, 90, 87,  7,  6, 80, 93,108, 63, 94, 23, 70, 65,  8, 89, 56),
 ( 78, 73, 32, 39, 68, 67,105,110, 26, 56,101, 93, 82,112, 51, 41, 46, 52,119, 85, 90, 98, 63, 29, 38,100, 54, 17, 14, 49, 99, 33, 34, 96,  3, 25, 30,  2,103, 37, 74, 57, 50,  9, 22, 53, 62, 77, 40,  8, 75, 27, 28, 76, 23, 47, 44, 16,117, 69, 66,114, 15, 43, 58,  4,113, 65, 70,118,  5, 61,  0, 72, 55, 45, 42, 48, 79,  1, 10,104, 97, 89, 94,102,111, 21, 18,108,115, 81, 86,116,107, 13, 24, 19, 80, 35, 36, 87, 12, 31, 92,109,  6, 83, 84,  7,106, 91, 88, 59, 64, 11, 20, 71, 60, 95),
 ( 79, 72, 34, 37, 70, 65,109,106, 54, 44, 87,116, 97, 88, 27, 57, 62, 28, 95,102,115, 80, 43, 49,103, 36, 23, 52, 51,  8, 35, 96,  3, 24, 39,100, 99, 32, 31,  2, 55, 16, 75, 56, 63, 76, 15, 48, 74, 26, 45, 17, 14, 42, 29, 77, 22, 46, 71,118,113, 64, 41,  9,117, 68, 59,  4,  5, 60, 67,114, 78,  0, 47, 53, 50, 40,  1, 73,101, 92, 19,108,107, 12, 91, 98,119, 84, 11,104,111, 20, 83,112, 38, 85, 10, 25, 30, 21, 82, 33, 86,  7,105, 89, 94,110,  6, 81, 18, 69, 58, 93, 90, 61, 66, 13),
 ( 80, 87, 57, 62, 97,102, 43, 44, 65, 27,115, 79, 49, 37,106, 95, 88,109, 34, 54, 72,116, 28, 70, 64, 19, 82, 55, 48, 85, 12, 71,112, 45, 66, 23,  8, 69, 42,119,  6, 39,114, 47, 40,117, 32,  7,  9, 25,107, 63, 56,108, 30, 22,105, 59, 50,  3,  2, 53, 60,110, 83, 35, 13, 29, 26, 18, 36, 84,104, 93, 14,103, 96, 17, 90,111, 81,  1, 67, 31, 24, 68,  0, 86,113, 75, 98, 21, 10,101, 76,118, 89, 99, 73,  5,  4, 78,100, 94, 11, 51, 77, 61, 58, 74, 52, 20, 41, 15, 33, 91, 92, 38, 16, 46),
 ( 81, 86, 59, 60, 99,100, 47, 40, 35, 55, 91,111, 25, 69, 77,118,113, 74, 66, 30,104, 92, 48, 36, 83, 54, 67, 22,  9, 68, 49, 84, 41,117, 13, 70, 65, 18,114, 46, 43,119, 33,  7,  6, 38,112, 44, 27, 19, 61,110,105, 58, 12, 28, 51,  3,107, 62, 57,108,  2, 52, 31, 23, 37, 85, 82, 34,  8, 24, 11,101,106, 94, 89,109, 98, 20,  1, 87, 29, 71, 64, 26, 80,  0, 15,103, 73,116,115, 78, 96, 16, 75,  5, 93,102, 97, 90,  4, 76, 79, 63, 17, 53, 50, 14, 56, 72, 39, 95, 45, 21, 10, 42, 88, 32),
 ( 82, 85, 56, 63,101, 98, 41, 46,105, 93, 51, 39,112, 73, 67, 29, 26, 68, 78,119, 32, 52, 90,110, 10, 69, 50, 87, 80, 53, 66, 21, 64, 17,115, 47, 40,116, 14, 71,113, 45,  6, 37, 34,  7, 42,118,104, 57, 15, 31, 24, 16, 62,111, 58,109,  3, 55, 48,  2,106, 61, 11, 27, 81, 33, 38, 86, 28, 20, 88,108, 99, 23,  8,100,107, 95, 65, 25, 83,  1,  0, 84, 30, 70, 97, 19,114, 77, 74,117, 12,102,  4, 79, 96, 91, 92,103, 72,  5, 59, 75, 49, 13, 18, 54, 76, 60, 89, 35,  9, 43, 44, 22, 36, 94),
 ( 83, 84, 58, 61,103, 96, 45, 42, 75,117, 31, 71, 89,108, 33, 53, 50, 38,107, 94, 64, 24,114, 76, 51, 86, 15, 70, 65, 16, 81, 52, 11, 68, 43,118,113, 44, 67, 20, 35,  7, 41,116,115, 46,  6, 36, 59,109, 29, 21, 10, 26,106, 60,  3, 54, 63,111,104, 56, 49,  2, 39, 87, 25, 17, 14, 30, 80, 32, 97, 18, 91,110,105, 92, 13,102, 27, 69,  1, 85, 82,  0, 66, 28, 79,119,  9,100, 99, 22,112, 72,101, 95,  4, 77, 74,  5, 88, 98, 55, 23, 57, 73, 78, 62,  8, 48, 19, 47, 93, 37, 34, 90, 40, 12),
 ( 84, 83, 61, 58, 96,103, 42, 45, 76,114, 24, 64, 94,107, 38, 50, 53, 33,108, 89, 71, 31,117, 75, 52, 81, 16, 65, 70, 15, 86, 51, 20, 67, 44,113,118, 43, 68, 11, 36,  6, 46,115,116, 41,  7, 35, 60,106, 26, 10, 21, 29,109, 59,  2, 49, 56,104,111, 63, 54,  3, 32, 80, 30, 14, 17, 25, 87, 39,102, 13, 92,105,110, 91, 18, 97, 28, 66,  0, 82, 85,  1, 69, 27, 72,112, 22, 99,100,  9,119, 79, 98, 88,  5, 74, 77,  4, 95,101, 48,  8, 62, 78, 73, 57, 23, 55, 12, 40, 90, 34, 37, 93, 47, 19),
 ( 85, 82, 63, 56, 98,101, 46, 41,110, 90, 52, 32,119, 78, 68, 26, 29, 67, 73,112, 39, 51, 93,105, 21, 66, 53, 80, 87, 50, 69, 10, 71, 14,116, 40, 47,115, 17, 64,118, 42,  7, 34, 37,  6, 45,113,111, 62, 16, 24, 31, 15, 57,104, 61,106,  2, 48, 55,  3,109, 58, 20, 28, 86, 38, 33, 81, 27, 11, 95,107,100,  8, 23, 99,108, 88, 70, 30, 84,  0,  1, 83, 25, 65,102, 12,117, 74, 77,114, 19, 97,  5, 72,103, 92, 91, 96, 79,  4, 60, 76, 54, 18, 13, 49, 75, 59, 94, 36, 22, 44, 43,  9, 35, 89),
 ( 86, 81, 60, 59,100, 99, 40, 47, 36, 48, 92,104, 30, 66, 74,113,118, 77, 69, 25,111, 91, 55, 35, 84, 49, 68,  9, 22, 67, 54, 83, 46,114, 18, 65, 70, 13,117, 41, 44,112, 38,  6,  7, 33,119, 43, 28, 12, 58,105,110, 61, 19, 27, 52,  2,108, 57, 62,107,  3, 51, 24,  8, 34, 82, 85, 37, 23, 31, 20, 98,109, 89, 94,106,101, 11,  0, 80, 26, 64, 71, 29, 87,  1, 16, 96, 78,115,116, 73,103, 15, 76,  4, 90, 97,102, 93,  5, 75, 72, 56, 14, 50, 53, 17, 63, 79, 32, 88, 42, 10, 21, 45, 95, 39),
 ( 87, 80, 62, 57,102, 97, 44, 43, 70, 28,116, 72, 54, 34,109, 88, 95,106, 37, 49, 79,115, 27, 65, 71, 12, 85, 48, 55, 82, 19, 64,119, 42, 69,  8, 23, 66, 45,112,  7, 32,117, 40, 47,114, 39,  6, 22, 30,108, 56, 63,107, 25,  9,110, 60, 53,  2,  3, 50, 59,105, 84, 36, 18, 26, 29, 13, 35, 83,111, 90, 17, 96,103, 14, 93,104, 86,  0, 68, 24, 31, 67,  1, 81,118, 76,101, 10, 21, 98, 75,113, 94,100, 78,  4,  5, 73, 99, 89, 20, 52, 74, 58, 61, 77, 51, 11, 46, 16, 38, 92, 91, 33, 15, 41),
 ( 88, 95,116,115, 27, 28, 49, 54, 57, 37, 65, 43, 72,102, 80,106,109, 87, 97, 79, 44, 70, 34, 62,  4, 47,105, 31, 24,110, 40,  5, 56, 21, 64, 91, 92, 71, 10, 63,104, 29,  8, 61, 58, 23, 26,111,100, 53,  6, 67, 68,  7, 50, 99, 93, 45, 11, 35, 36, 20, 42, 90,  9, 33, 48, 98,101, 55, 38, 22,108, 85,113, 15, 16,118, 82,107, 96, 77,112, 13, 18,119, 74,103, 89,  1, 32, 60, 59, 39,  0, 94, 17, 83, 52, 66, 69, 51, 84, 14, 25, 41, 76, 12, 19, 75, 46, 30, 73, 81,  2,114,117,  3, 86, 78),
 ( 89, 94,117,114, 31, 24, 53, 50, 45, 71, 33, 61,108, 84, 96, 76, 75,103, 83,107, 58, 38, 64, 42, 27,111, 41,  5,  4, 46,104, 28, 93, 70,  9, 60, 59, 22, 65, 90, 25,110, 57, 20, 11, 62,105, 30, 69,  7, 49, 98,101, 54,  6, 66, 39, 23, 43, 91, 92, 44,  8, 32, 37, 21,100, 52, 51, 99, 10, 34, 19,119, 81,106,109, 86,112, 12, 17,118, 73,102, 97, 78,113, 14,  1, 95, 56, 36, 35, 63, 88,  0, 87, 13, 68, 48, 55, 67, 18, 80, 47, 29, 16, 72, 79, 15, 26, 40, 85, 77,116,  2,  3,115, 74, 82),
 ( 90, 93,112,119, 26, 29, 51, 52, 82,105, 78,101, 67, 41, 63, 39, 32, 56, 46, 68, 98, 73,110, 85, 42,  4, 30,109,106, 25,  5, 45, 66, 89, 62, 19, 12, 57, 94, 69, 14, 59,107, 27, 28,108, 60, 17,  6, 65,103, 55, 48, 96, 70,  7, 40, 88, 38, 18, 13, 33, 95, 47, 50, 97, 15, 35, 36, 16,102, 53, 80,104, 22,117,114,  9,111, 87,115, 11, 99, 75, 76,100, 20,116, 34, 58, 91,  1,  0, 92, 61, 37, 64, 54, 81, 23,  8, 86, 49, 71, 10, 74, 43, 31, 24, 44, 77, 21,113,  3, 83, 79, 72, 84,  2,118),
 ( 91, 92,113,118, 30, 25, 55, 48, 99, 74,111, 86, 35, 59, 47, 69, 66, 40, 60, 36, 81,104, 77,100,107, 26,  5, 44, 43,  4, 29,108, 15, 58, 95, 68, 67, 88, 61, 16, 63, 18, 31,109,106, 24, 13, 56, 51, 97, 71,  7,  6, 64,102, 52, 14, 34, 94, 46, 41, 89, 37, 17,103, 54, 39, 19, 12, 32, 49, 96,115, 10,110, 84, 83,105, 21,116, 79,101, 23,117,114,  8, 98, 72, 62, 38,  1, 93, 90,  0, 33, 57, 50, 70, 11, 85, 82, 20, 65, 53, 78, 22, 27, 45, 42, 28,  9, 73,  3,119, 75, 87, 80, 76,112,  2),
 ( 92, 91,118,113, 25, 30, 48, 55,100, 77,104, 81, 36, 60, 40, 66, 69, 47, 59, 35, 86,111, 74, 99,108, 29,  4, 43, 44,  5, 26,107, 16, 61, 88, 67, 68, 95, 58, 15, 56, 13, 24,106,109, 31, 18, 63, 52,102, 64,  6,  7, 71, 97, 51, 17, 37, 89, 41, 46, 94, 34, 14, 96, 49, 32, 12, 19, 39, 54,103,116, 21,105, 83, 84,110, 10,115, 72, 98,  8,114,117, 23,101, 79, 57, 33,  0, 90, 93,  1, 38, 62, 53, 65, 20, 82, 85, 11, 70, 50, 73,  9, 28, 42, 45, 27, 22, 78,  2,112, 76, 80, 87, 75,119,  3),
 ( 93, 90,119,112, 29, 26, 52, 51, 85,110, 73, 98, 68, 46, 56, 32, 39, 63, 41, 67,101, 78,105, 82, 45,  5, 25,106,109, 30,  4, 42, 69, 94, 57, 12, 19, 62, 89, 66, 17, 60,108, 28, 27,107, 59, 14,  7, 70, 96, 48, 55,103, 65,  6, 47, 95, 33, 13, 18, 38, 88, 40, 53,102, 16, 36, 35, 15, 97, 50, 87,111,  9,114,117, 22,104, 80,116, 20,100, 76, 75, 99, 11,115, 37, 61, 92,  0,  1, 91, 58, 34, 71, 49, 86,  8, 23, 81, 54, 64, 21, 77, 44, 24, 31, 43, 74, 10,118,  2, 84, 72, 79, 83,  3,113),
 ( 94, 89,114,117, 24, 31, 50, 53, 42, 64, 38, 58,107, 83,103, 75, 76, 96, 84,108, 61, 33, 71, 45, 28,104, 46,  4,  5, 41,111, 27, 90, 65, 22, 59, 60,  9, 70, 93, 30,105, 62, 11, 20, 57,110, 25, 66,  6, 54,101, 98, 49,  7, 69, 32,  8, 44, 92, 91, 43, 23, 39, 34, 10, 99, 51, 52,100, 21, 37, 12,112, 86,109,106, 81,119, 19, 14,113, 78, 97,102, 73,118, 17,  0, 88, 63, 35, 36, 56, 95,  1, 80, 18, 67, 55, 48, 68, 13, 87, 40, 26, 15, 79, 72, 16, 29, 47, 82, 74,115,  3,  2,116, 77, 85),
 ( 95, 88,115,116, 28, 27, 54, 49, 62, 34, 70, 44, 79, 97, 87,109,106, 80,102, 72, 43, 65, 37, 57,  5, 40,110, 24, 31,105, 47,  4, 63, 10, 71, 92, 91, 64, 21, 56,111, 26, 23, 58, 61,  8, 29,104, 99, 50,  7, 68, 67,  6, 53,100, 90, 42, 20, 36, 35, 11, 45, 93, 22, 38, 55,101, 98, 48, 33,  9,107, 82,118, 16, 15,113, 85,108,103, 74,119, 18, 13,112, 77, 96, 94,  0, 39, 59, 60, 32,  1, 89, 14, 84, 51, 69, 66, 52, 83, 17, 30, 46, 75, 19, 12, 76, 41, 25, 78, 86,  3,117,114,  2, 81, 73),
 ( 96,103, 45, 42, 83, 84, 61, 58, 33, 31,114,107, 53, 71, 76, 94, 89, 75, 64, 50,108,117, 24, 38,  9, 79,112, 99,100,119, 72, 22, 73, 23, 48, 62, 57, 55,  8, 78, 49, 63,  2,111,104,  3, 56, 54, 37, 47, 12, 90, 93, 19, 40, 34, 41, 35,  6,115,116,  7, 36, 46, 13, 91,102,110,105, 97, 92, 18, 25, 39, 80, 14, 17, 87, 32, 30, 77, 95, 98,  5,  4,101, 88, 74, 81, 15, 52, 70, 65, 51, 16, 86,  1, 66, 85, 28, 27, 82, 69,  0, 43, 67,118, 20, 11,113, 68, 44, 29,106, 21, 60, 59, 10,109, 26),
 ( 97,102, 44, 43, 87, 80, 57, 62,109,116, 27, 37, 88, 72, 65, 49, 54, 70, 79, 95, 34, 28,115,106,101,118, 75, 21, 10, 76,113, 98, 58, 52, 11, 77, 74, 20, 51, 61, 59, 53,105,  2,  3,110, 50, 60, 92, 16, 41, 33, 38, 46, 15, 91,117,  7, 39, 47, 40, 32,  6,114, 93, 17,104, 96,103,111, 14, 90, 18, 84, 35, 29, 26, 36, 83, 13,  4,100, 89, 73, 78, 94, 99,  5, 19, 85, 64, 48, 55, 71, 82, 12, 68,  1, 24, 81, 86, 31,  0, 67, 69, 45,  8,112,119, 23, 42, 66,108, 25, 56,  9, 22, 63, 30,107),
 ( 98,101, 41, 46, 82, 85, 63, 56, 67, 51, 90, 78, 29, 39,110,119,112,105, 32, 26, 73, 93, 52, 68,114, 97, 12, 74, 77, 19,102,117, 13, 75, 60, 54, 49, 59, 76, 18,106,  3, 61, 55, 48, 58,  2,109, 43, 35, 94, 22,  9, 89, 36, 44,  6,113, 42, 34, 37, 45,118,  7,107, 99, 95, 23,  8, 88,100,108, 81, 11, 28, 38, 33, 27, 20, 86, 91, 79,  5,103, 96,  4, 72, 92, 66, 50, 21, 87, 80, 10, 53, 69, 83, 30,  1, 70, 65,  0, 25, 84,115, 14, 47, 71, 64, 40, 17,116, 15, 62, 31,111,104, 24, 57, 16),
 ( 99,100, 40, 47, 86, 81, 59, 60, 74, 92, 55, 69,113,104, 35, 25, 30, 36,111,118, 66, 48, 91, 77, 78, 16,103,116,115, 96, 15, 73, 50, 56, 79, 17, 14, 72, 63, 53,  3,108, 51, 57, 62, 52,107,  2, 10, 88, 39, 45, 42, 32, 95, 21, 38, 44,119,  7,  6,112, 43, 33,101,109, 11, 89, 94, 20,106, 98, 34, 24, 23, 85, 82,  8, 31, 37, 97,  4, 75, 93, 90, 76,  5,102, 54, 68, 83,  9, 22, 84, 67, 49, 26, 87, 64,  1,  0, 71, 80, 29, 18,117, 65, 41, 46, 70,114, 13, 58, 19,105, 27, 28,110, 12, 61),
 (100, 99, 47, 40, 81, 86, 60, 59, 77, 91, 48, 66,118,111, 36, 30, 25, 35,104,113, 69, 55, 92, 74, 73, 15, 96,115,116,103, 16, 78, 53, 63, 72, 14, 17, 79, 56, 50,  2,107, 52, 62, 57, 51,108,  3, 21, 95, 32, 42, 45, 39, 88, 10, 33, 43,112,  6,  7,119, 44, 38, 98,106, 20, 94, 89, 11,109,101, 37, 31,  8, 82, 85, 23, 24, 34,102,  5, 76, 90, 93, 75,  4, 97, 49, 67, 84, 22,  9, 83, 68, 54, 29, 80, 71,  0,  1, 64, 87, 26, 13,114, 70, 46, 41, 65,117, 18, 61, 12,110, 28, 27,105, 19, 58),
 (101, 98, 46, 41, 85, 82, 56, 63, 68, 52, 93, 73, 26, 32,105,112,119,110, 39, 29, 78, 90, 51, 67,117,102, 19, 77, 74, 12, 97,114, 18, 76, 59, 49, 54, 60, 75, 13,109,  2, 58, 48, 55, 61,  3,106, 44, 36, 89,  9, 22, 94, 35, 43,  7,118, 45, 37, 34, 42,113,  6,108,100, 88,  8, 23, 95, 99,107, 86, 20, 27, 33, 38, 28, 11, 81, 92, 72,  4, 96,103,  5, 79, 91, 69, 53, 10, 80, 87, 21, 50, 66, 84, 25,  0, 65, 70,  1, 30, 83,116, 17, 40, 64, 71, 47, 14,115, 16, 57, 24,104,111, 31, 62, 15),
 (102, 97, 43, 44, 80, 87, 62, 57,106,115, 28, 34, 95, 79, 70, 54, 49, 65, 72, 88, 37, 27,116,109, 98,113, 76, 10, 21, 75,118,101, 61, 51, 20, 74, 77, 11, 52, 58, 60, 50,110,  3,  2,105, 53, 59, 91, 15, 46, 38, 33, 41, 16, 92,114,  6, 32, 40, 47, 39,  7,117, 90, 14,111,103, 96,104, 17, 93, 13, 83, 36, 26, 29, 35, 84, 18,  5, 99, 94, 78, 73, 89,100,  4, 12, 82, 71, 55, 48, 64, 85, 19, 67,  0, 31, 86, 81, 24,  1, 68, 66, 42, 23,119,112,  8, 45, 69,107, 30, 63, 22,  9, 56, 25,108),
 (103, 96, 42, 45, 84, 83, 58, 61, 38, 24,117,108, 50, 64, 75, 89, 94, 76, 71, 53,107,114, 31, 33, 22, 72,119,100, 99,112, 79,  9, 78,  8, 55, 57, 62, 48, 23, 73, 54, 56,  3,104,111,  2, 63, 49, 34, 40, 19, 93, 90, 12, 47, 37, 46, 36,  7,116,115,  6, 35, 41, 18, 92, 97,105,110,102, 91, 13, 30, 32, 87, 17, 14, 80, 39, 25, 74, 88,101,  4,  5, 98, 95, 77, 86, 16, 51, 65, 70, 52, 15, 81,  0, 69, 82, 27, 28, 85, 66,  1, 44, 68,113, 11, 20,118, 67, 43, 26,109, 10, 59, 60, 21,106, 29),
 (104,111, 69, 66, 35, 36, 77, 74, 25, 47, 81, 91,100,118, 48, 60, 59, 55,113, 99, 92, 86, 40, 30, 89, 23, 65, 63, 56, 70,  8, 94, 57, 71,112,  5,  4,119, 64, 62,  9, 95, 96,110,105,103, 88, 22, 17, 85,114,106,109,117, 82, 14, 27, 39, 83, 15, 16, 84, 32, 28, 33, 29,  2,102, 97,  3, 26, 38, 93, 87,  6,107,108,  7, 80, 90, 73, 21, 49, 61, 58, 54, 10, 78, 41, 31, 72, 20, 11, 79, 24, 46, 45, 67,116, 12, 19,115, 68, 42,  1, 43, 52, 76, 75, 51, 44,  0, 37, 13, 53, 98,101, 50, 18, 34),
 (105,110, 68, 67, 39, 32, 73, 78, 93, 85, 41, 29, 56, 52,112, 98,101,119, 51, 63, 26, 46, 82, 90, 59, 71, 11, 95, 88, 20, 64, 60,  4,118, 65, 61, 58, 70,113,  5, 89, 21,104,102, 97,111, 10, 94,108,116, 81, 13, 18, 86,115,107, 19, 87, 35, 31, 24, 36, 80, 12, 25, 37, 96,  2,  3,103, 34, 30,109,  7, 83, 91, 92, 84,  6,106, 57, 53,  9, 77, 74, 22, 50, 62, 27, 47,  8, 76, 75, 23, 40, 28, 69, 43, 16,114,117, 15, 44, 66, 45,  1, 72, 48, 55, 79,  0, 42, 17, 33,100, 49, 54, 99, 38, 14),
 (106,109, 65, 70, 34, 37, 79, 72,115, 97, 62, 54, 43, 27, 95, 87, 80, 88, 28, 44, 49, 57,102,116, 66, 58, 90, 18, 13, 93, 61, 69, 67, 59,  5,117,114,  4, 60, 68,107,101, 91, 19, 12, 92, 98,108, 83, 11,111,119,112,104, 20, 84, 82, 10, 30, 38, 33, 25, 21, 85, 99,  3, 31, 39, 32, 24,  2,100,  6,105, 94, 86, 81, 89,110,  7, 15, 75, 63, 55, 48, 56, 76, 16, 14, 74, 29, 45, 42, 26, 77, 17,113, 22, 41, 71, 64, 46,  9,118, 50, 78,  1, 47, 40,  0, 73, 53, 51,103, 35, 23,  8, 36, 96, 52),
 (107,108, 64, 71, 38, 33, 75, 76, 50, 58,103,117, 83, 89, 31, 45, 42, 24, 94, 84,114, 96, 61, 53, 14, 92, 62, 68, 67, 57, 91, 17,115,  4, 63, 69, 66, 56,  5,116, 99,109, 15, 93, 90, 16,106,100,113,105, 23, 87, 80,  8,110,118, 34, 26, 22, 86, 81,  9, 29, 37,  3,101, 35, 27, 28, 36, 98,  2, 82, 88,111,  7,  6,104, 95, 85, 51, 59, 79, 19, 12, 72, 60, 52, 78, 18, 43, 25, 30, 44, 13, 73, 10,119, 65, 47, 40, 70,112, 21, 74, 54, 41,  1,  0, 46, 49, 77, 97, 55, 11, 39, 32, 20, 48,102),
 (108,107, 71, 64, 33, 38, 76, 75, 53, 61, 96,114, 84, 94, 24, 42, 45, 31, 89, 83,117,103, 58, 50, 17, 91, 57, 67, 68, 62, 92, 14,116,  5, 56, 66, 69, 63,  4,115,100,106, 16, 90, 93, 15,109, 99,118,110,  8, 80, 87, 23,105,113, 37, 29,  9, 81, 86, 22, 26, 34,  2, 98, 36, 28, 27, 35,101,  3, 85, 95,104,  6,  7,111, 88, 82, 52, 60, 72, 12, 19, 79, 59, 51, 73, 13, 44, 30, 25, 43, 18, 78, 21,112, 70, 40, 47, 65,119, 10, 77, 49, 46,  0,  1, 41, 54, 74,102, 48, 20, 32, 39, 11, 55, 97),
 (109,106, 70, 65, 37, 34, 72, 79,116,102, 57, 49, 44, 28, 88, 80, 87, 95, 27, 43, 54, 62, 97,115, 69, 61, 93, 13, 18, 90, 58, 66, 68, 60,  4,114,117,  5, 59, 67,108, 98, 92, 12, 19, 91,101,107, 84, 20,104,112,119,111, 11, 83, 85, 21, 25, 33, 38, 30, 10, 82,100,  2, 24, 32, 39, 31,  3, 99,  7,110, 89, 81, 86, 94,105,  6, 16, 76, 56, 48, 55, 63, 75, 15, 17, 77, 26, 42, 45, 29, 74, 14,118,  9, 46, 64, 71, 41, 22,113, 53, 73,  0, 40, 47,  1, 78, 50, 52, 96, 36,  8, 23, 35,103, 51),
 (110,105, 67, 68, 32, 39, 78, 73, 90, 82, 46, 26, 63, 51,119,101, 98,112, 52, 56, 29, 41, 85, 93, 60, 64, 20, 88, 95, 11, 71, 59,  5,113, 70, 58, 61, 65,118,  4, 94, 10,111, 97,102,104, 21, 89,107,115, 86, 18, 13, 81,116,108, 12, 80, 36, 24, 31, 35, 87, 19, 30, 34,103,  3,  2, 96, 37, 25,106,  6, 84, 92, 91, 83,  7,109, 62, 50, 22, 74, 77,  9, 53, 57, 28, 40, 23, 75, 76,  8, 47, 27, 66, 44, 15,117,114, 16, 43, 69, 42,  0, 79, 55, 48, 72,  1, 45, 14, 38, 99, 54, 49,100, 33, 17),
 (111,104, 66, 69, 36, 35, 74, 77, 30, 40, 86, 92, 99,113, 55, 59, 60, 48,118,100, 91, 81, 47, 25, 94,  8, 70, 56, 63, 65, 23, 89, 62, 64,119,  4,  5,112, 71, 57, 22, 88,103,105,110, 96, 95,  9, 14, 82,117,109,106,114, 85, 17, 28, 32, 84, 16, 15, 83, 39, 27, 38, 26,  3, 97,102,  2, 29, 33, 90, 80,  7,108,107,  6, 87, 93, 78, 10, 54, 58, 61, 49, 21, 73, 46, 24, 79, 11, 20, 72, 31, 41, 42, 68,115, 19, 12,116, 67, 45,  0, 44, 51, 75, 76, 52, 43,  1, 34, 18, 50,101, 98, 53, 13, 37),
 (112,119, 93, 90, 51, 52, 29, 26, 41, 39, 67, 63, 73, 85, 98,110,105,101, 82, 78, 56, 68, 32, 46, 65, 55,  6,103, 96,  7, 48, 70,  9, 87,114,111,104,117, 80, 22, 81, 23, 49, 71, 64, 54,  8, 86, 25, 45,106,  5,  4,109, 42, 30, 11, 75,115, 99,100,116, 76, 20, 43, 31, 77, 21, 10, 74, 24, 44, 89, 19, 66, 62, 57, 69, 12, 94, 33, 47, 13, 95, 88, 18, 40, 38, 83, 79,  2,118,113,  3, 72, 84, 27,107, 17, 60, 59, 14,108, 28, 35, 15, 53,102, 97, 50, 16, 36,  1, 91, 37, 61, 58, 34, 92,  0),
 (113,118, 92, 91, 55, 48, 25, 30, 59, 69, 35, 47,104,100, 81, 77, 74, 86, 99,111, 40, 36, 66, 60, 97,  7, 51, 71, 64, 52,  6,102,105,116, 83, 21, 10, 84,115,110, 11, 85, 65, 53, 50, 70, 82, 20,  4,108, 43, 29, 26, 44,107,  5,101,117, 79, 23,  8, 72,114, 98, 27, 45,  9, 73, 78, 22, 42, 28, 58, 68, 15, 95, 88, 16, 67, 61, 89, 17, 41, 37, 34, 46, 14, 94, 75, 87,112,  2,  3,119, 80, 76,109, 31, 56, 13, 18, 63, 24,106, 19, 39, 96, 49, 54,103, 32, 12, 93,  1, 57, 33, 38, 62,  0, 90),
 (114,117, 89, 94, 50, 53, 31, 24, 83, 75,107,103, 33, 45, 61, 71, 64, 58, 42, 38, 96,108, 76, 84,  6,101, 66, 54, 49, 69, 98,  7, 81, 19,106,119,112,109, 12, 86, 67, 55, 13, 87, 80, 18, 48, 68, 41, 27,  5,111,104,  4, 28, 46,113, 97, 14, 78, 73, 17,102,118, 15, 79, 29, 47, 40, 26, 72, 16, 65, 59, 90, 22,  9, 93, 60, 70, 43, 39, 91, 23,  8, 92, 32, 44,115,  3, 77, 85, 82, 74,  2,116, 11, 62, 25,110,105, 30, 57, 20, 51, 99, 37, 21, 10, 34,100, 52, 35, 63,  1, 95, 88,  0, 56, 36),
 (115,116, 88, 95, 54, 49, 27, 28, 97,109, 79, 87, 65, 57, 43, 37, 34, 44, 62, 70, 80, 72,106,102, 50, 68, 99,  7,  6,100, 67, 53,113,108, 15, 85, 82, 16,107,118, 51, 69, 83, 17, 14, 84, 66, 52,105,  4, 31, 47, 40, 24,  5,110, 74, 18,103,119,112, 96, 13, 77, 75, 19, 41, 25, 30, 46, 12, 76, 10, 92, 63, 71, 64, 56, 91, 21, 11, 93, 35, 45, 42, 36, 90, 20,  3,117, 81, 73, 78, 86,114,  2, 58, 23,104, 29, 26,111,  8, 61,101, 55,  9, 33, 38, 22, 48, 98, 59, 39, 89,  1,  0, 94, 32, 60),
 (116,115, 95, 88, 49, 54, 28, 27,102,106, 72, 80, 70, 62, 44, 34, 37, 43, 57, 65, 87, 79,109, 97, 53, 67,100,  6,  7, 99, 68, 50,118,107, 16, 82, 85, 15,108,113, 52, 66, 84, 14, 17, 83, 69, 51,110,  5, 24, 40, 47, 31,  4,105, 77, 13, 96,112,119,103, 18, 74, 76, 12, 46, 30, 25, 41, 19, 75, 21, 91, 56, 64, 71, 63, 92, 10, 20, 90, 36, 42, 45, 35, 93, 11,  2,114, 86, 78, 73, 81,117,  3, 61,  8,111, 26, 29,104, 23, 58, 98, 48, 22, 38, 33,  9, 55,101, 60, 32, 94,  0,  1, 89, 39, 59),
 (117,114, 94, 89, 53, 50, 24, 31, 84, 76,108, 96, 38, 42, 58, 64, 71, 61, 45, 33,103,107, 75, 83,  7, 98, 69, 49, 54, 66,101,  6, 86, 12,109,112,119,106, 19, 81, 68, 48, 18, 80, 87, 13, 55, 67, 46, 28,  4,104,111,  5, 27, 41,118,102, 17, 73, 78, 14, 97,113, 16, 72, 26, 40, 47, 29, 79, 15, 70, 60, 93,  9, 22, 90, 59, 65, 44, 32, 92,  8, 23, 91, 39, 43,116,  2, 74, 82, 85, 77,  3,115, 20, 57, 30,105,110, 25, 62, 11, 52,100, 34, 10, 21, 37, 99, 51, 36, 56,  0, 88, 95,  1, 63, 35),
 (118,113, 91, 92, 48, 55, 30, 25, 60, 66, 36, 40,111, 99, 86, 74, 77, 81,100,104, 47, 35, 69, 59,102,  6, 52, 64, 71, 51,  7, 97,110,115, 84, 10, 21, 83,116,105, 20, 82, 70, 50, 53, 65, 85, 11,  5,107, 44, 26, 29, 43,108,  4, 98,114, 72,  8, 23, 79,117,101, 28, 42, 22, 78, 73,  9, 45, 27, 61, 67, 16, 88, 95, 15, 68, 58, 94, 14, 46, 34, 37, 41, 17, 89, 76, 80,119,  3,  2,112, 87, 75,106, 24, 63, 18, 13, 56, 31,109, 12, 32,103, 54, 49, 96, 39, 19, 90,  0, 62, 38, 33, 57,  1, 93),
 (119,112, 90, 93, 52, 51, 26, 29, 46, 32, 68, 56, 78, 82,101,105,110, 98, 85, 73, 63, 67, 39, 41, 70, 48,  7, 96,103,  6, 55, 65, 22, 80,117,104,111,114, 87,  9, 86,  8, 54, 64, 71, 49, 23, 81, 30, 42,109,  4,  5,106, 45, 25, 20, 76,116,100, 99,115, 75, 11, 44, 24, 74, 10, 21, 77, 31, 43, 94, 12, 69, 57, 62, 66, 19, 89, 38, 40, 18, 88, 95, 13, 47, 33, 84, 72,  3,113,118,  2, 79, 83, 28,108, 14, 59, 60, 17,107, 27, 36, 16, 50, 97,102, 53, 15, 35,  0, 92, 34, 58, 61, 37, 91,  1)) #delightful
edgeActions=tap(lambda q: cell600.index(versor((surd([[[1,4],1],[[5,16],2]]),)+q)),chain(*map(signs,eventations((surd([[[-1,4],1],[[5,16],2]]),surd([[[1,2],1]]),surd([[[0,1],1]]))))))
lineDrawers=tap(edgeActions.__getitem__,(0,1,4,5,8,9))#pairs=((0,3),(1,2),(4,7),(5,6),(8,11),(9,10))

import pygame
from pygame.locals import *
clock=pygame.time.Clock()
pygame.init()
size=(2560,1050)
screen=pygame.display.set_mode(size[:2],pygame.RESIZABLE)
mouse=pygame.mouse
def drawShape(size,pos,colour,shape=0):
    size=min(size,minSize)
    '''if shape==0:
        pygame.draw.rect(screen,colour,pos+size)
    elif shape<5:
        pygame.draw.polygon(screen,colour,[[p+s/2*cos(((i+shape/2)/(2 if shape==4 else 3 if shape==3 else  4)+di/2)*pi) for di,(p,s) in enumerate(zip(pos,size))] for i in range(4 if shape==4 else 6 if shape==3 else 8)])
    else:'''
    pygame.draw.circle(screen,colour,pos,size/2)
def drawLine(initial,destination,colour,width=1):
    if width==1:
        pygame.draw.line(screen,colour,initial,destination)
    else:
        (x,y)=map(lambda d,i: (d-i)**2,destination,initial)
        if x or y:
            pygame.draw.line(screen,colour,initial,destination,int(width*((x/y if x<y else y/x)+1)**0.5))
def doEvents():
    global run,clickDone
    clickDone=False
    global framesMouseDown,shortClickDone
    global size,minSize,halfSize
    shortClickDone=False
    if mouse.get_pressed()[0]:
        framesMouseDown+=1
    else:
        framesMouseDown=0
    for event in pygame.event.get():
        if event.type==pygame.QUIT:
            run=False
        if event.type==pygame.MOUSEBUTTONUP:
            clickDone=True
            if framesMouseDown<0.2*FPS:
                shortClickDone=True
        if event.type==pygame.WINDOWRESIZED:
            size=screen.get_rect().size
            minSize=min(size)
            halfSize=tap(lambda s: s/2,size)
    pygame.display.flip()
    clock.tick(FPS)
    screen.fill(0x000000)
    size=screen.get_size()
FPS=24
axialCollision=(lambda m0,v0,m1,v1: (((m0-m1)*v0+2*m1*v1)/(m0+m1),
                                ((m1-m0)*v1+2*m0*v0)/(m1+m0)))

pixelAngle=tau/max(size)
gain=1/600
rad=10
drag=1/2**4
angularGain=gain*tau/FPS
camera=[(versor((1.0,0.0,0.0,0.0)),versor((1.0,0.0,0.0,0.0))),[versor((1.0,0.0,0.0,0.0)),versor((1.0,0.0,0.0,0.0))]]#((versor((1.0,0.0,0.0,0.0)),versor((1.0,0.0,0.0,0.0))),(versor((1.0,0.0,0.0,0.0)),versor((1.0,0.0,0.0,0.0)))) #velocity is versor by which it's multiplied each frame

project=(lambda n: (camera[0][1]*versor.log(n/camera[0][0]) if twistyMode else versor.log(camera[0][0]*n*camera[0][1])))
def projectRelativeToScreen(position,radius=rad):
    (x,y,z)=position
    if projectionMode==0:
        r=tap(__add__,(position*minSize*(1/2))[:2],halfSize)+(0,)
    if projectionMode==1: #weird
        r=tap(lambda i: minSize*atan2(i,z),(x,y))+(0,)
    elif projectionMode==2: #azimuthal equidistant
        h=((x or y) and atan2((x**2+y**2),z**2)/hypot(x,y))
        r=(x*h/pixelAngle,y*h/pixelAngle,hypot(*position))
    else:
        magnitude=atan2(hypot(x,y),z) #other azimuthals
        if projectionMode==3: #Lambert equi-area (not to be taken to before 1772)
            magnitude=2*abs(sin(magnitude/2)) #formerly sqrt(sin(magnitude)**2+(cos(magnitude)-1)**2)
        elif projectionMode==4: #stereographic (trippy)
            if radius==0:
                magnitude=1/tan(magnitude/2) #equivalent to sin(magnitude)/(1-cos(magnitude))
            else:
                h=hypot(x,y)
                hh=hypot(*position)
                offset=asin(radius/hh)
                s0=1/tan((magnitude-offset)/2)
                s1=1/tan((magnitude+offset)/2)
                radius=s1-s0
                magnitude=(s0+s1)/2
        direction=atan2(x,y)
        r=(sin(direction)*magnitude/pixelAngle,cos(direction)*magnitude/pixelAngle,(hypot(*position)))
    return((r[0]+halfSize[0],r[1]+halfSize[1],r[2]))

projectionMode=3
perspectiveMode=True
twistyMode=False #elegant implementation of unfortunately misunderstood maths
omnidirectionalMode=False
colourMode=not(perspectiveMode)
triangleWave=(lambda o: tap(lambda c: int(255*(1-(lambda o: 3*o if o<1/3 else 2-3*o if o<2/3 else 0)((o+c/3)%1))),range(3)))
toggleKeys=(pygame.K_SPACE,)
oldToggles=(False,)*len(toggleKeys)
run=True
while run:
    keys=pygame.key.get_pressed()
    doEvents()
    if twistyMode: #camera=((position,orientation),(spatial,angular))
        camera=tarmap(lambda s,v: tap(versor.__mul__,s,v),(camera,(camera[1],map(lambda i,v,m: vector3.exp((lambda m: tuple(camera[0][1].conjugate()*m) if i else m)(m*v)),range(2),(vector3((keys[pygame.K_d]-keys[pygame.K_a],keys[pygame.K_f]-keys[pygame.K_r],keys[pygame.K_w]-keys[pygame.K_s])),vector3((keys[pygame.K_DOWN]-keys[pygame.K_UP],keys[pygame.K_LEFT]-keys[pygame.K_RIGHT],keys[pygame.K_q]-keys[pygame.K_e]))),(gain,angularGain)))))
    else: #camera=((weird intertwined representation of both),(spatial,angular))
        camera[1][0]*=vector3.exp(gain*vector3((keys[pygame.K_a]-keys[pygame.K_d],keys[pygame.K_r]-keys[pygame.K_f],keys[pygame.K_s]-keys[pygame.K_w]))*(-1)**twistyMode) #(I change the conventions instead of fixing the program :-)
        camera[1][1]*=vector3.exp(angularGain*vector3((keys[pygame.K_DOWN]-keys[pygame.K_UP],keys[pygame.K_LEFT]-keys[pygame.K_RIGHT],keys[pygame.K_q]-keys[pygame.K_e])))
        motion=versor.log(camera[1][0])
        a=hypot(*motion)
        (left,right)=rotationParameters(a,(1.0,0.0,0.0,0.0),vector3.exp(pi/2*vector3.normalise(motion)))
        camera[0]=(camera[1][1]*left*camera[0][0],camera[0][1]*right*camera[1][1]**-1) #very important order

    if keys[pygame.K_LSHIFT]:
        camera=[camera[0],[versor((1.0,0.0,0.0,0.0)),versor((1.0,0.0,0.0,0.0))]]
    for t,n in zip(transitions,nodes):
        if perspectiveMode:
            f=project(n)
        else:
            f=n/camera[0][0]
            if colourMode:
                a=atan2(f[2],f[3])/tau
        o=projectRelativeToScreen(f)
        if omnidirectionalMode or f[2]>0:
            drawShape(rad/o[2],o[:2],(triangleWave(a) if colourMode else 0xffffff),0)
        for e in lineDrawers:
            g=project(nodes[t[e]])
            if colourMode:
                b=atan2(g[2],g[3])/tau
            d=projectRelativeToScreen(g)
            if dist(o[:2],d[:2])>20 and omnidirectionalMode or f[2]>0 and g[2]>0:
                drawLine(o[:2],d[:2],(tap(lambda a,b: sqrt((a**2+b**2)/2),triangleWave(a),triangleWave(b)) if colourMode else 0xffffff))
    '''for n in map(lambda n: camera[0][0]*n,versor((cos(pi/8),sin(pi/8),0.0,0.0))):
        f=camera[0][1]*versor.log(n/camera[0][0])
        drawShape(rad/o[2],o[:2],(triangleWave(a) if colourMode else 0xffffff),0)'''
    toggles=tap(keys.__getitem__,toggleKeys)
    for i,(k,o) in enumerate(zip(toggles,oldToggles)):
        if not k and o:
            if i==0: #space
                print(orientation)
    oldToggles=toggles
else: exit()
